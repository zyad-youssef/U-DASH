{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"children\", \"className\", \"hasIcon\", \"intent\", \"isRemoveable\", \"onRemove\", \"title\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { spacing, dimensions, position, layout } from 'ui-box';\nimport { IconButton } from '../../buttons';\nimport { useStyleConfig } from '../../hooks';\nimport { CrossIcon } from '../../icons';\nimport { Pane } from '../../layers';\nimport { Heading, Paragraph } from '../../typography';\nimport { getIconForIntent } from './getIconForIntent';\nvar pseudoSelectors = {};\nvar internalStyles = {\n  position: 'relative',\n  overflow: 'hidden',\n  display: 'flex',\n  // 15 instead of 16 in order to maintain height with 1px border\n  padding: '15px'\n};\nvar Alert = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Alert(props, ref) {\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      children = props.children,\n      className = props.className,\n      _props$hasIcon = props.hasIcon,\n      hasIcon = _props$hasIcon === void 0 ? true : _props$hasIcon,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'info' : _props$intent,\n      _props$isRemoveable = props.isRemoveable,\n      isRemoveable = _props$isRemoveable === void 0 ? false : _props$isRemoveable,\n      onRemove = props.onRemove,\n      title = props.title,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var intentToken = intent === 'none' ? 'info' : intent;\n\n  var _useStyleConfig = useStyleConfig('Alert', {\n    appearance: appearance,\n    intent: intentToken\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    ref: ref,\n    className: cx(className, themedClassName),\n    role: \"alert\"\n  }, styleProps, restProps), hasIcon && /*#__PURE__*/React.createElement(Pane, {\n    marginRight: 16,\n    marginLeft: 2,\n    marginTop: -1,\n    display: \"flex\",\n    alignItems: \"flex-start\"\n  }, getIconForIntent(intentToken, {\n    size: 16\n  })), /*#__PURE__*/React.createElement(Pane, {\n    flex: 1\n  }, title && /*#__PURE__*/React.createElement(Heading, {\n    is: \"h4\",\n    size: 400,\n    marginTop: 0,\n    marginBottom: 0,\n    fontWeight: 500,\n    lineHeight: 1 // Get this from the theme / props on the Alert\n    ,\n    color: \"inherit\"\n  }, title), typeof children === 'string' ? /*#__PURE__*/React.createElement(Paragraph, {\n    size: 400,\n    color: \"muted\",\n    marginTop: title ? 8 : 0,\n    lineHeight: 1\n  }, children) : /*#__PURE__*/React.createElement(Pane, null, children)), isRemoveable && /*#__PURE__*/React.createElement(Pane, {\n    marginLeft: 24,\n    flexShrink: 0,\n    marginBottom: -2,\n    marginTop: -4,\n    marginRight: -4\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    icon: CrossIcon,\n    appearance: \"minimal\",\n    height: 24,\n    onClick: onRemove,\n    intent: intentToken\n  })));\n}));\nAlert.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The content of the alert. When a string is passed it is wrapped in a `<Text size={400} />` component.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The title of the alert.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, show a icon on the left matching the type,\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * When true, show a remove icon button.\n   */\n  isRemoveable: PropTypes.bool,\n\n  /**\n   * Function called when the remove button is clicked.\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * The appearance of the alert.\n   */\n  appearance: PropTypes.oneOf(['default', 'card'])\n});\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}