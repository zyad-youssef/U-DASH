{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"containerProps\", \"preventBodyScrolling\", \"shouldCloseOnClick\", \"shouldCloseOnEscapePress\", \"onBeforeClose\", \"onExit\", \"onExiting\", \"onExited\", \"onEnter\", \"onEntering\", \"onEntered\", \"isShown\"];\nimport React, { memo, useState, useEffect, useRef } from 'react';\nimport cx from 'classnames';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport Box from 'ui-box';\nimport { StackingOrder } from '../../constants';\nimport preventBodyScroll from '../../lib/prevent-body-scroll';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { Portal } from '../../portal';\nimport { Stack } from '../../stack';\nimport { useTheme } from '../../theme';\n\nvar noop = function noop() {};\n\nvar emptyProps = {};\nvar animationEasing = {\n  standard: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)',\n  sharp: 'cubic-bezier(0.4, 0.0, 0.6, 1)',\n  spring: 'cubic-bezier(0.175, 0.885, 0.320, 1.175)'\n};\nvar ANIMATION_DURATION = 240;\nvar fadeInAnimation = css.keyframes('fadeInAnimation', {\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar fadeOutAnimation = css.keyframes('fadeOutAnimation', {\n  from: {\n    opacity: 1\n  },\n  to: {\n    opacity: 0\n  }\n});\n\nvar animationStyles = function animationStyles(backgroundColor) {\n  return {\n    '&::before': {\n      backgroundColor: backgroundColor,\n      left: 0,\n      top: 0,\n      position: 'fixed',\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      content: '\" \"'\n    },\n    '&[data-state=\"entering\"]::before, &[data-state=\"entered\"]::before': {\n      animation: \"\".concat(fadeInAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n    },\n    '&[data-state=\"exiting\"]::before, &[data-state=\"exited\"]::before': {\n      animation: \"\".concat(fadeOutAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n    }\n  };\n};\n/**\n * Overlay is essentially a wrapper around react-transition-group/Transition\n */\n\n\nvar Overlay = /*#__PURE__*/memo(function Overlay(_ref) {\n  var children = _ref.children,\n      _ref$containerProps = _ref.containerProps,\n      containerProps = _ref$containerProps === void 0 ? emptyProps : _ref$containerProps,\n      _ref$preventBodyScrol = _ref.preventBodyScrolling,\n      preventBodyScrolling = _ref$preventBodyScrol === void 0 ? false : _ref$preventBodyScrol,\n      _ref$shouldCloseOnCli = _ref.shouldCloseOnClick,\n      shouldCloseOnClick = _ref$shouldCloseOnCli === void 0 ? true : _ref$shouldCloseOnCli,\n      _ref$shouldCloseOnEsc = _ref.shouldCloseOnEscapePress,\n      shouldCloseOnEscapePress = _ref$shouldCloseOnEsc === void 0 ? true : _ref$shouldCloseOnEsc,\n      onBeforeClose = _ref.onBeforeClose,\n      _ref$onExit = _ref.onExit,\n      onExit = _ref$onExit === void 0 ? noop : _ref$onExit,\n      _ref$onExiting = _ref.onExiting,\n      onExiting = _ref$onExiting === void 0 ? noop : _ref$onExiting,\n      _ref$onExited = _ref.onExited,\n      onExited = _ref$onExited === void 0 ? noop : _ref$onExited,\n      _ref$onEnter = _ref.onEnter,\n      onEnter = _ref$onEnter === void 0 ? noop : _ref$onEnter,\n      _ref$onEntering = _ref.onEntering,\n      onEntering = _ref$onEntering === void 0 ? noop : _ref$onEntering,\n      _ref$onEntered = _ref.onEntered,\n      onEntered = _ref$onEntered === void 0 ? noop : _ref$onEntered,\n      isShown = _ref.isShown,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useTheme();\n  var colors = theme.colors;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      previousActiveElement = _useState2[0],\n      setPreviousActiveElement = _useState2[1];\n\n  var _useState3 = useState(isShown ? 'entering' : 'exited'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var containerRef = useRef(null);\n  useEffect(function () {\n    if (isShown) {\n      setStatus('entering');\n    }\n  }, [isShown]);\n\n  var close = function close() {\n    var shouldClose = safeInvoke(onBeforeClose);\n\n    if (shouldClose !== false) {\n      setStatus('exiting');\n    }\n  };\n\n  var onEsc = function onEsc(event) {\n    if (event.key === 'Escape' && shouldCloseOnEscapePress) {\n      close();\n    }\n  };\n\n  useEffect(function () {\n    if (status === 'entered') {\n      setPreviousActiveElement(document.activeElement);\n      bringFocusInsideOverlay();\n    }\n\n    if (status === 'entering') {\n      document.body.addEventListener('keydown', onEsc, false);\n    }\n\n    if (status === 'exiting') {\n      document.body.removeEventListener('keydown', onEsc, false);\n      bringFocusBackToTarget();\n    } // These missing deps *should* be okay (adding them would require other changes)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [status]); // ComponentWillUnmount\n\n  useEffect(function () {\n    return function () {\n      handleBodyScroll(false);\n      document.body.removeEventListener('keydown', onEsc, false);\n    };\n  }, // These missing deps *should* be okay (adding them would require other changes)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  /**\n   * Methods borrowed from BlueprintJS\n   * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx\n   */\n\n  var bringFocusInsideOverlay = function bringFocusInsideOverlay() {\n    // Always delay focus manipulation to just before repaint to prevent scroll jumping\n    return requestAnimationFrame(function () {\n      // Container ref may be undefined between component mounting and Portal rendering\n      // activeElement may be undefined in some rare cases in IE\n      if (containerRef.current == null || // eslint-disable-line eqeqeq, no-eq-null\n      document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null\n      !isShown) {\n        return;\n      }\n\n      var isFocusOutsideModal = !containerRef.current.contains(document.activeElement);\n\n      if (isFocusOutsideModal) {\n        // Element marked autofocus has higher priority than the other clowns\n        var autofocusElement = containerRef.current.querySelector('[autofocus]');\n        var wrapperElement = containerRef.current.querySelector('[tabindex]');\n        var buttonElement = containerRef.current.querySelector('button');\n\n        if (autofocusElement) {\n          autofocusElement.focus();\n        } else if (wrapperElement) {\n          wrapperElement.focus();\n        } else if (buttonElement) {\n          buttonElement.focus();\n        }\n      }\n    });\n  };\n\n  var bringFocusBackToTarget = function bringFocusBackToTarget() {\n    return requestAnimationFrame(function () {\n      if (previousActiveElement == null || // eslint-disable-line eqeqeq, no-eq-null\n      containerRef.current == null || // eslint-disable-line eqeqeq, no-eq-null\n      document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null\n      ) {\n        return;\n      } // Bring back focus on the target.\n\n\n      var isFocusInsideModal = containerRef.current.contains(document.activeElement);\n\n      if (document.activeElement === document.body || isFocusInsideModal) {\n        previousActiveElement.focus();\n      }\n    });\n  };\n\n  var handleBodyScroll = function handleBodyScroll(preventScroll) {\n    if (preventBodyScrolling) {\n      preventBodyScroll(preventScroll);\n    }\n  };\n\n  var handleEnter = function handleEnter(node, isAppearing) {\n    handleBodyScroll(true);\n    safeInvoke(onEnter, node, isAppearing);\n  };\n\n  var handleEntering = function handleEntering(node, isAppearing) {\n    setStatus('entering');\n    safeInvoke(onEntering, node, isAppearing);\n  };\n\n  var handleEntered = function handleEntered(node, isAppearing) {\n    setStatus('entered');\n    safeInvoke(onEntered, node, isAppearing);\n  };\n\n  var handleExit = function handleExit(node) {\n    handleBodyScroll(false);\n    safeInvoke(onExit, node);\n  };\n\n  var handleExiting = function handleExiting(node) {\n    setStatus('exiting');\n    safeInvoke(onExiting, node);\n  };\n\n  var handleExited = function handleExited(node) {\n    setStatus('exited');\n    safeInvoke(onExited, node);\n  };\n\n  var handleBackdropClick = function handleBackdropClick(event) {\n    if (event.target !== event.currentTarget || !shouldCloseOnClick) {\n      return;\n    }\n\n    close();\n  };\n\n  if (status === 'exited') {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Stack, {\n    value: StackingOrder.OVERLAY\n  }, function (zIndex) {\n    return /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Transition, {\n      nodeRef: containerRef,\n      appear: true,\n      unmountOnExit: true,\n      timeout: ANIMATION_DURATION,\n      \"in\": isShown && status !== 'exiting',\n      onExit: handleExit,\n      onExiting: handleExiting,\n      onExited: handleExited,\n      onEnter: handleEnter,\n      onEntering: handleEntering,\n      onEntered: handleEntered\n    }, function (state) {\n      return /*#__PURE__*/React.createElement(Box, _extends({\n        onClick: handleBackdropClick,\n        ref: containerRef,\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: zIndex,\n        \"data-state\": state\n      }, containerProps, {\n        className: cx(containerProps.className, css(animationStyles(colors.overlay)).toString())\n      }), typeof children === 'function' ? children({\n        state: state,\n        close: close\n      }) : children);\n    }));\n  });\n});\nOverlay.propTypes = {\n  /**\n   * Children can be a node or a function accepting `close: func`\n   * and `state: ENTERING | ENTERED | EXITING | EXITED`.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Props to be passed through on the inner Box.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Whether or not to prevent body scrolling outside the context of the overlay\n   */\n  preventBodyScrolling: PropTypes.bool,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Function called when overlay is about to close.\n   * Return `false` to prevent the sheet from closing.\n   * type: `Function -> Boolean`\n   */\n  onBeforeClose: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   * type: `Function(node: HtmlElement) -> void`\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   * type: `Function(node: HtmlElement) -> void`\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   * type: `Function(exitState: Any?, node: HtmlElement) -> void`\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEntered: PropTypes.func\n};\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}