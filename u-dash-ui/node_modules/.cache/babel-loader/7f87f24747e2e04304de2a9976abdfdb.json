{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"value\", \"children\", \"onChange\", \"autoFocus\", \"spellCheck\", \"placeholder\", \"icon\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useCallback } from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { SearchIcon } from '../../icons';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { Text } from '../../typography';\nimport TableHeaderCell from './TableHeaderCell';\nvar invisibleInputClass = css({\n  border: 'none',\n  backgroundColor: 'transparent',\n  WebkitAppearance: 'none',\n  MozAppearance: 'none',\n  WebkitFontSmoothing: 'antialiased',\n  '&:focus': {\n    outline: 'none'\n  },\n  '&::placeholder': {\n    color: 'rgba(67, 90, 111, 0.7)'\n  }\n}).toString();\n\nvar noop = function noop() {};\n\nvar SearchTableHeaderCell = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function SearchTableHeaderCell(props, ref) {\n  var value = props.value,\n      children = props.children,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? noop : _props$onChange,\n      autoFocus = props.autoFocus,\n      _props$spellCheck = props.spellCheck,\n      spellCheck = _props$spellCheck === void 0 ? true : _props$spellCheck,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? 'Filter...' : _props$placeholder,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? SearchIcon : _props$icon,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var handleChange = useCallback(function (e) {\n    return onChange(e.target.value);\n  }, [onChange]);\n  return /*#__PURE__*/React.createElement(TableHeaderCell, rest, /*#__PURE__*/React.createElement(IconWrapper, {\n    icon: icon,\n    color: \"muted\",\n    marginLeft: 2,\n    marginRight: 10,\n    size: 12\n  }), /*#__PURE__*/React.createElement(Text, {\n    is: \"input\",\n    size: 300,\n    flex: \"1\",\n    className: invisibleInputClass,\n    value: value,\n    onChange: handleChange,\n    autoFocus: autoFocus,\n    spellCheck: spellCheck,\n    fontWeight: 500,\n    marginLeft: -2,\n    paddingLeft: 0,\n    placeholder: placeholder,\n    ref: ref\n  }));\n}));\nSearchTableHeaderCell.propTypes = _objectSpread(_objectSpread({}, TableHeaderCell.propTypes), {}, {\n  /**\n   * The value of the input.\n   */\n  value: PropTypes.string,\n\n  /**\n   * Handler to be called when the input changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Sets whether the component should be automatically focused on component render.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Sets whether to apply spell checking to the content.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * Text to display in the input if the input is empty.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The Evergreen or custom icon before the label.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element])\n});\nexport default SearchTableHeaderCell;","map":null,"metadata":{},"sourceType":"module"}