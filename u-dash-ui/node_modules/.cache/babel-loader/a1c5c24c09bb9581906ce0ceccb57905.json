{"ast":null,"code":"import { useCallback } from 'react';\nimport safeInvoke from '../lib/safe-invoke';\nimport { useLatest } from './use-latest';\n/**\n * React hook that returns bind props for a clickable component.\n * When the component has focus, Enter and space activate it\n */\n\nexport function useClickable() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      onKeyDownHandler = _ref.onKeyDown,\n      _ref$tabIndex = _ref.tabIndex,\n      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex;\n\n  var onKeyDownRef = useLatest(onKeyDownHandler);\n  var onKeyDown = useCallback(function (event) {\n    safeInvoke(onKeyDownRef.current, event);\n    if (event.defaultPrevented) return;\n    if (disabled) return;\n    if (event.metaKey) return;\n    if (event.target !== event.currentTarget) return;\n\n    if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n      // \"Spacebar\" for IE11 support\n      // Prevent the default action to stop scrolling when space is pressed\n      event.preventDefault();\n      event.currentTarget.click();\n    }\n  }, // onKeyDownRef is a ref, but eslint can't figure that out\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  return {\n    // TODO import useFocusable as well (needs to be focusable)\n    tabIndex: disabled ? -1 : tabIndex,\n    onKeyDown: onKeyDown\n  };\n}","map":null,"metadata":{},"sourceType":"module"}