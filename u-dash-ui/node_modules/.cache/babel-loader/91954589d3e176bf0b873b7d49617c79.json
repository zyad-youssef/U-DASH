{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"title\", \"width\", \"height\", \"options\", \"onSelect\", \"onDeselect\", \"onFilterChange\", \"selected\", \"position\", \"hasTitle\", \"hasFilter\", \"filterPlaceholder\", \"filterIcon\", \"detailView\", \"emptyView\", \"titleView\", \"isMultiSelect\", \"closeOnSelect\", \"itemRenderer\", \"itemHeight\"];\nimport React, { memo, useMemo } from 'react';\nimport arrify from 'arrify';\nimport PropTypes from 'prop-types';\nimport { Position } from '../../constants';\nimport { SearchIcon } from '../../icons';\nimport { Popover } from '../../popover';\nimport OptionShapePropType from './OptionShapePropType';\nimport SelectedPropType from './SelectedPropType';\nimport SelectMenuContent from './SelectMenuContent';\n\nvar noop = function noop() {};\n\nvar SelectMenu = /*#__PURE__*/memo(function SelectMenu(props) {\n  var title = props.title,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 240 : _props$width,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 248 : _props$height,\n      options = props.options,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      _props$onDeselect = props.onDeselect,\n      onDeselect = _props$onDeselect === void 0 ? noop : _props$onDeselect,\n      onFilterChange = props.onFilterChange,\n      selected = props.selected,\n      _props$position = props.position,\n      position = _props$position === void 0 ? Position.BOTTOM_LEFT : _props$position,\n      hasTitle = props.hasTitle,\n      hasFilter = props.hasFilter,\n      _props$filterPlacehol = props.filterPlaceholder,\n      filterPlaceholder = _props$filterPlacehol === void 0 ? 'Filter...' : _props$filterPlacehol,\n      _props$filterIcon = props.filterIcon,\n      filterIcon = _props$filterIcon === void 0 ? SearchIcon : _props$filterIcon,\n      detailView = props.detailView,\n      emptyView = props.emptyView,\n      titleView = props.titleView,\n      _props$isMultiSelect = props.isMultiSelect,\n      isMultiSelect = _props$isMultiSelect === void 0 ? false : _props$isMultiSelect,\n      _props$closeOnSelect = props.closeOnSelect,\n      closeOnSelect = _props$closeOnSelect === void 0 ? false : _props$closeOnSelect,\n      itemRenderer = props.itemRenderer,\n      itemHeight = props.itemHeight,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var selectedArray = useMemo(function () {\n    return arrify(selected);\n  }, [selected]);\n  return /*#__PURE__*/React.createElement(Popover, _extends({\n    minWidth: width,\n    position: position,\n    minHeight: height,\n    content: function content(_ref) {\n      var close = _ref.close;\n      return /*#__PURE__*/React.createElement(SelectMenuContent, {\n        width: width,\n        height: height,\n        options: options,\n        title: title,\n        hasFilter: hasFilter,\n        filterPlaceholder: filterPlaceholder,\n        filterIcon: filterIcon,\n        hasTitle: hasTitle,\n        isMultiSelect: isMultiSelect,\n        titleView: titleView,\n        listProps: {\n          onSelect: onSelect,\n          onDeselect: onDeselect,\n          onFilterChange: onFilterChange,\n          selected: selectedArray,\n          renderItem: itemRenderer,\n          optionSize: itemHeight\n        },\n        close: close,\n        detailView: typeof detailView === 'function' ? detailView({\n          close: close\n        }) : detailView,\n        emptyView: typeof emptyView === 'function' ? emptyView({\n          close: close\n        }) : emptyView,\n        closeOnSelect: closeOnSelect\n      });\n    }\n  }, rest));\n});\nSelectMenu.propTypes = {\n  /**\n   * The title of the Select Menu.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The width of the Select Menu.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The height of the Select Menu.\n   */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The options to show in the menu.\n   * [{ label: String, value: String | Number }]\n   */\n  options: PropTypes.arrayOf(OptionShapePropType),\n\n  /**\n   * Function that is called when an option is selected.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called when an option is deselected.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * The selected value/values.\n   */\n  selected: SelectedPropType,\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /**\n   * When true, show the title.\n   */\n  hasTitle: PropTypes.bool,\n\n  /**\n   * When true, show the filter.\n   */\n  hasFilter: PropTypes.bool,\n\n  /**\n   * The placeholder of the search filter.\n   */\n  filterPlaceholder: PropTypes.string,\n\n  /**\n   * The icon of the search filter.\n   */\n  filterIcon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Function that is called as the onChange() event for the filter.\n   */\n  onFilterChange: PropTypes.func,\n\n  /**\n   * The position of the Select Menu.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered on the right side of the Select Menu to give additional\n   * information when an option is selected.\n   */\n  detailView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered in the header section of the Select Menu to customize\n   * the header.\n   */\n  titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered instead of the options list when there are no options.\n   */\n  emptyView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /*\n   * When true, menu closes on option selection.\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Can pass a method that can be used to render custom items in the\n   * select menu\n   */\n  itemRenderer: PropTypes.func,\n\n  /**\n   * The height of the items in the select menu list\n   */\n  itemHeight: PropTypes.number\n};\nexport default SelectMenu;","map":null,"metadata":{},"sourceType":"module"}