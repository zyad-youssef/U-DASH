{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"children\"],\n    _excluded2 = [\"color\"];\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport { Paragraph } from '../../typography';\nvar pseudoSelectors = {};\nvar internalStyles = {};\nvar TooltipStateless = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TooltipStateless(props, ref) {\n  var appearance = props.appearance,\n      children = props.children,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var _useStyleConfig = useStyleConfig('Tooltip', {\n    appearance: appearance\n  }, pseudoSelectors, internalStyles),\n      boxProps = _extends({}, _useStyleConfig);\n\n  var color = boxProps.color,\n      themedProps = _objectWithoutProperties(boxProps, _excluded2);\n\n  var child;\n\n  if (typeof children === 'string') {\n    child = /*#__PURE__*/React.createElement(Paragraph, {\n      color: color,\n      size: 400\n    }, children);\n  } else {\n    child = children;\n  }\n\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    ref: ref\n  }, themedProps, restProps), child);\n}));\nTooltipStateless.propTypes = {\n  children: PropTypes.node,\n\n  /**\n   * The appearance of the tooltip.\n   */\n  appearance: PropTypes.oneOf(['default', 'card']).isRequired\n};\nexport default TooltipStateless;","map":null,"metadata":{},"sourceType":"module"}