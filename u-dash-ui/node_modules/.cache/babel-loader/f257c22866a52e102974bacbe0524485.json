{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"className\", \"icon\", \"iconColor\", \"size\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport removeUndefined from '../../lib/remove-undefined';\nvar emptyObject = {};\nvar internalStyles = {\n  margin: 0,\n  marginLeft: '1.1em',\n  padding: 0,\n  listStyle: 'disc'\n};\nvar UnorderedList = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function UnorderedList(props, ref) {\n  var children = props.children,\n      className = props.className,\n      icon = props.icon,\n      iconColor = props.iconColor,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 400 : _props$size,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useStyleConfig = useStyleConfig('List', {\n    size: size\n  }, emptyObject, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var enrichedChildren = React.Children.map(children, function (child) {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return child;\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, removeUndefined(_objectSpread({\n      icon: icon,\n      size: size,\n      iconColor: iconColor\n    }, child.props)));\n  });\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"ul\",\n    className: cx(className, themedClassName)\n  }, styleProps, rest, {\n    ref: ref\n  }), enrichedChildren);\n}));\nUnorderedList.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {\n  /**\n   * Size of the text used in a list item.\n   * Can be: 300, 400, 500, 600.\n   */\n  size: PropTypes.oneOf([300, 400, 500, 600]),\n\n  /**\n   * When passed, adds a icon before each list item in the list\n   * You can override this on a individual list item.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The color of the icon in each list item in the list.\n   */\n  iconColor: PropTypes.string\n});\nexport default UnorderedList;","map":null,"metadata":{},"sourceType":"module"}