{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _paneProps, _subpaneProps, _animationStylesClass;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo } from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { Position } from '../../constants';\nimport { Pane } from '../../layers';\nimport { Overlay } from '../../overlay';\nimport SheetClose from './SheetClose';\nvar paneProps = (_paneProps = {}, _defineProperty(_paneProps, Position.LEFT, {\n  height: '100vh',\n  maxWidth: '100vw',\n  position: 'absolute',\n  left: 0,\n  right: 'auto'\n}), _defineProperty(_paneProps, Position.RIGHT, {\n  height: '100vh',\n  maxWidth: '100vw',\n  position: 'absolute',\n  right: 0,\n  left: 'auto'\n}), _defineProperty(_paneProps, Position.TOP, {\n  width: '100vw',\n  position: 'absolute',\n  maxHeight: '100vh',\n  top: 0,\n  bottom: 'auto'\n}), _defineProperty(_paneProps, Position.BOTTOM, {\n  width: '100vw',\n  maxHeight: '100vh',\n  position: 'absolute',\n  bottom: 0,\n  top: 'auto'\n}), _paneProps);\nvar subpaneProps = (_subpaneProps = {}, _defineProperty(_subpaneProps, Position.LEFT, {\n  height: '100vh'\n}), _defineProperty(_subpaneProps, Position.RIGHT, {\n  height: '100vh'\n}), _defineProperty(_subpaneProps, Position.TOP, {\n  width: '100vw'\n}), _defineProperty(_subpaneProps, Position.BOTTOM, {\n  width: '100vw'\n}), _subpaneProps);\nvar animationEasing = {\n  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)'\n};\nvar ANIMATION_DURATION = 240;\n\nvar withAnimations = function withAnimations(animateIn, animateOut) {\n  return {\n    '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n      animation: \"\".concat(animateIn, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n    },\n    '&[data-state=\"exiting\"]': {\n      animation: \"\".concat(animateOut, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n    }\n  };\n};\n\nvar animationStylesClass = (_animationStylesClass = {}, _defineProperty(_animationStylesClass, Position.LEFT, _objectSpread({\n  transform: 'translateX(-100%)'\n}, withAnimations(css.keyframes('anchoredLeftSlideInAnimation', {\n  from: {\n    transform: 'translateX(-100%)'\n  },\n  to: {\n    transform: 'translateX(0)'\n  }\n}), css.keyframes('anchoredLeftSlideOutAnimation', {\n  from: {\n    transform: 'translateX(0)'\n  },\n  to: {\n    transform: 'translateX(-100%)'\n  }\n})))), _defineProperty(_animationStylesClass, Position.RIGHT, _objectSpread({\n  transform: 'translateX(100%)'\n}, withAnimations(css.keyframes('anchoredRightSlideInAnimation', {\n  from: {\n    transform: 'translateX(100%)'\n  },\n  to: {\n    transform: 'translateX(0)'\n  }\n}), css.keyframes('anchoredRightSlideOutAnimation', {\n  from: {\n    transform: 'translateX(0)'\n  },\n  to: {\n    transform: 'translateX(100%)'\n  }\n})))), _defineProperty(_animationStylesClass, Position.TOP, _objectSpread({\n  transform: 'translateY(-100%)'\n}, withAnimations(css.keyframes('anchoredTopSlideInAnimation', {\n  from: {\n    transform: 'translateY(-100%)'\n  },\n  to: {\n    transform: 'translateY(0)'\n  }\n}), css.keyframes('anchoredTopSlideOutAnimation', {\n  from: {\n    transform: 'translateY(0)'\n  },\n  to: {\n    transform: 'translateY(-100%)'\n  }\n})))), _defineProperty(_animationStylesClass, Position.BOTTOM, _objectSpread({\n  transform: 'translateY(100%)'\n}, withAnimations(css.keyframes('anchoredBottomSlideInAnimation', {\n  from: {\n    transform: 'translateY(100%)'\n  },\n  to: {\n    transform: 'translateY(0)'\n  }\n}), css.keyframes('anchoredBottomSlideOutAnimation', {\n  from: {\n    transform: 'translateY(0)'\n  },\n  to: {\n    transform: 'translateY(100%)'\n  }\n})))), _animationStylesClass);\n\nvar noop = function noop() {};\n\nvar SideSheet = /*#__PURE__*/memo(function SideSheet(props) {\n  var _props$width = props.width,\n      width = _props$width === void 0 ? 620 : _props$width,\n      isShown = props.isShown,\n      children = props.children,\n      containerProps = props.containerProps,\n      _props$onOpenComplete = props.onOpenComplete,\n      onOpenComplete = _props$onOpenComplete === void 0 ? noop : _props$onOpenComplete,\n      _props$onCloseComplet = props.onCloseComplete,\n      onCloseComplete = _props$onCloseComplet === void 0 ? noop : _props$onCloseComplet,\n      onBeforeClose = props.onBeforeClose,\n      _props$shouldCloseOnO = props.shouldCloseOnOverlayClick,\n      shouldCloseOnOverlayClick = _props$shouldCloseOnO === void 0 ? true : _props$shouldCloseOnO,\n      _props$shouldCloseOnE = props.shouldCloseOnEscapePress,\n      shouldCloseOnEscapePress = _props$shouldCloseOnE === void 0 ? true : _props$shouldCloseOnE,\n      _props$position = props.position,\n      position = _props$position === void 0 ? Position.RIGHT : _props$position,\n      preventBodyScrolling = props.preventBodyScrolling;\n  return /*#__PURE__*/React.createElement(Overlay, {\n    isShown: isShown,\n    shouldCloseOnClick: shouldCloseOnOverlayClick,\n    shouldCloseOnEscapePress: shouldCloseOnEscapePress,\n    onBeforeClose: onBeforeClose,\n    onExited: onCloseComplete,\n    onEntered: onOpenComplete,\n    preventBodyScrolling: preventBodyScrolling\n  }, function (_ref) {\n    var close = _ref.close,\n        state = _ref.state;\n    return /*#__PURE__*/React.createElement(Pane, _extends({\n      width: width\n    }, paneProps[position], {\n      className: css(animationStylesClass[position]).toString(),\n      \"data-state\": state\n    }), /*#__PURE__*/React.createElement(SheetClose, {\n      position: position,\n      \"data-state\": state,\n      isClosing: false,\n      onClick: close\n    }), /*#__PURE__*/React.createElement(Pane, _extends({\n      elevation: 4,\n      backgroundColor: \"white\",\n      overflowY: \"auto\",\n      maxHeight: \"100vh\",\n      \"data-state\": state,\n      width: width\n    }, subpaneProps[position], containerProps), typeof children === 'function' ? children({\n      close: close\n    }) : children));\n  });\n});\nSideSheet.propTypes = {\n  /**\n   * Children can be a string, node or a function accepting `({ close })`.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * When true, the Side Sheet is shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function called when overlay is about to close.\n   * Return `false` to prevent the sheet from closing.\n   * type: `Function -> Boolean`\n   */\n  onBeforeClose: PropTypes.func,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnOverlayClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Width of the SideSheet.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Properties to pass through the SideSheet container Pane.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Positions the sheet to the top, left, right, or bottom of the screen.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.BOTTOM, Position.LEFT, Position.RIGHT]),\n\n  /**\n   * Whether or not to prevent scrolling in the outer body\n   */\n  preventBodyScrolling: PropTypes.bool\n};\nexport default SideSheet;","map":null,"metadata":{},"sourceType":"module"}