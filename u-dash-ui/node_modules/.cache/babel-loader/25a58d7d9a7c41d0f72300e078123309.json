{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"color\", \"forceShowInitials\", \"getInitials\", \"hashValue\", \"name\", \"shape\", \"size\", \"sizeLimitOneCharacter\", \"src\"],\n    _excluded2 = [\"className\"];\nimport React, { useState, memo, forwardRef, useCallback } from 'react';\nimport cx from 'classnames';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { Image } from '../../image';\nimport { Text } from '../../typography';\nimport globalGetInitials from './utils/getInitials';\nimport globalHash from './utils/hash';\nvar imageStyles = {\n  objectFit: 'cover'\n};\nvar pseudoSelectors = {};\nvar internalStyles = {\n  overflow: 'hidden',\n  position: 'relative',\n  display: 'inline-flex',\n  flexShrink: 0,\n  justifyContent: 'center'\n};\nvar isObjectFitSupported = typeof document !== 'undefined' && 'objectFit' in document.documentElement.style;\nvar initialsStyleClass = css({\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n}).toString();\n\nvar getAvatarInitialsFontSize = function getAvatarInitialsFontSize(size, sizeLimitOneCharacter) {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.floor(size / 2.2);\n  }\n\n  return Math.floor(size / 2.6);\n};\n\nvar Avatar = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Avatar(props, ref) {\n  var className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'automatic' : _props$color,\n      _props$forceShowIniti = props.forceShowInitials,\n      forceShowInitials = _props$forceShowIniti === void 0 ? false : _props$forceShowIniti,\n      _props$getInitials = props.getInitials,\n      getInitials = _props$getInitials === void 0 ? globalGetInitials : _props$getInitials,\n      propsHashValue = props.hashValue,\n      name = props.name,\n      _props$shape = props.shape,\n      shape = _props$shape === void 0 ? 'round' : _props$shape,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 24 : _props$size,\n      _props$sizeLimitOneCh = props.sizeLimitOneCharacter,\n      sizeLimitOneCharacter = _props$sizeLimitOneCh === void 0 ? 20 : _props$sizeLimitOneCh,\n      src = props.src,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var hashValue = globalHash(propsHashValue || name);\n\n  var _useStyleConfig = useStyleConfig('Avatar', {\n    color: color,\n    hashValue: hashValue,\n    shape: shape\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageHasFailedLoading = _useState2[0],\n      setImageHasFailedLoading = _useState2[1];\n\n  var onError = useCallback(function () {\n    return setImageHasFailedLoading(true);\n  }, []);\n  var imageUnavailable = !src || imageHasFailedLoading;\n  var initialsFontSize = \"\".concat(getAvatarInitialsFontSize(size, sizeLimitOneCharacter), \"px\");\n  var initials = getInitials(name);\n\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.slice(0, 1);\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    width: size,\n    height: size,\n    title: name,\n    ref: ref,\n    className: cx(className, themedClassName)\n  }, styleProps, restProps), (imageUnavailable || forceShowInitials) && /*#__PURE__*/React.createElement(Text, {\n    className: initialsStyleClass,\n    fontSize: initialsFontSize,\n    lineHeight: initialsFontSize,\n    width: size,\n    height: size,\n    color: \"inherit\"\n  }, initials), !imageUnavailable && /*#__PURE__*/React.createElement(Image, {\n    style: imageStyles // Unsupported by ui-box directly\n    ,\n    width: isObjectFitSupported ? '100%' : 'auto' // Fallback to old behaviour on IE\n    ,\n    height: \"100%\",\n    src: src,\n    onError: onError\n  }));\n}));\nAvatar.propTypes = {\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The src attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The size of the avatar.\n   */\n  size: PropTypes.number,\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue: PropTypes.string,\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials: PropTypes.func,\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials: PropTypes.bool,\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter: PropTypes.number,\n\n  /**\n   * Allows for the shape of the avatar component to either be round or square\n   */\n  shape: PropTypes.oneOf(['round', 'square'])\n};\nexport default Avatar;","map":null,"metadata":{},"sourceType":"module"}