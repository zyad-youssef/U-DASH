{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { IconButton } from '../../buttons';\nimport { CrossIcon } from '../../icons';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport OptionShapePropType from './OptionShapePropType';\nimport OptionsList from './OptionsList';\n\nvar DefaultTitleView = function DefaultTitleView(_ref) {\n  var close = _ref.close,\n      headerHeight = _ref.headerHeight,\n      title = _ref.title;\n  return /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"center\",\n    borderBottom: \"default\",\n    padding: 8,\n    height: headerHeight,\n    boxSizing: \"border-box\"\n  }, /*#__PURE__*/React.createElement(Pane, {\n    flex: \"1\",\n    display: \"flex\",\n    alignItems: \"center\"\n  }, /*#__PURE__*/React.createElement(Text, {\n    size: 300,\n    textTransform: \"uppercase\"\n  }, title)), /*#__PURE__*/React.createElement(IconButton, {\n    icon: CrossIcon,\n    appearance: \"minimal\",\n    height: 24,\n    onClick: close,\n    border: \"none\"\n  }));\n};\n\nDefaultTitleView.displayName = \"DefaultTitleView\";\nDefaultTitleView.propTypes = {\n  close: PropTypes.func,\n  title: PropTypes.string,\n  headerHeight: PropTypes.number\n};\nvar emptyArray = [];\nvar SelectMenuContent = /*#__PURE__*/memo(function SelectMenuContent(props) {\n  var title = props.title,\n      width = props.width,\n      height = props.height,\n      _props$options = props.options,\n      options = _props$options === void 0 ? emptyArray : _props$options,\n      _props$hasTitle = props.hasTitle,\n      hasTitle = _props$hasTitle === void 0 ? true : _props$hasTitle,\n      _props$hasFilter = props.hasFilter,\n      hasFilter = _props$hasFilter === void 0 ? true : _props$hasFilter,\n      filterPlaceholder = props.filterPlaceholder,\n      filterIcon = props.filterIcon,\n      close = props.close,\n      listProps = props.listProps,\n      _props$titleView = props.titleView,\n      titleView = _props$titleView === void 0 ? DefaultTitleView : _props$titleView,\n      detailView = props.detailView,\n      emptyView = props.emptyView,\n      isMultiSelect = props.isMultiSelect,\n      closeOnSelect = props.closeOnSelect;\n  var headerHeight = 40;\n  var optionsListHeight = hasTitle ? height - headerHeight : height;\n  var hasDetailView = Boolean(detailView);\n  var hasEmptyView = Boolean(emptyView);\n  return /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    height: height\n  }, /*#__PURE__*/React.createElement(Pane, {\n    width: width,\n    height: height,\n    display: \"flex\",\n    flexDirection: \"column\",\n    borderRight: hasDetailView ? 'muted' : null\n  }, hasTitle && titleView({\n    close: close,\n    title: title,\n    headerHeight: headerHeight\n  }), options.length === 0 && hasEmptyView ? /*#__PURE__*/React.createElement(Pane, {\n    height: optionsListHeight\n  }, emptyView) : /*#__PURE__*/React.createElement(OptionsList, _extends({\n    height: optionsListHeight,\n    hasFilter: hasFilter,\n    filterPlaceholder: filterPlaceholder,\n    filterIcon: filterIcon,\n    options: options,\n    isMultiSelect: isMultiSelect,\n    close: close,\n    closeOnSelect: closeOnSelect\n  }, listProps))), hasDetailView && detailView);\n});\nSelectMenuContent.propTypes = {\n  close: PropTypes.func,\n  title: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  headerHeight: PropTypes.number,\n  options: PropTypes.arrayOf(OptionShapePropType),\n  hasTitle: PropTypes.bool,\n  hasFilter: PropTypes.bool,\n  filterPlaceholder: PropTypes.string,\n  filterIcon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n  listProps: PropTypes.shape(OptionsList.propTypes),\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /*\n   * When true, menu closes on option selection.\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Node that is placed in the header section, above the options.\n   */\n  titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Node that is placed right next to the options.\n   */\n  detailView: PropTypes.node,\n\n  /**\n   * Node that is displayed instead of options list when there are no options.\n   */\n  emptyView: PropTypes.node\n};\nexport default SelectMenuContent;","map":null,"metadata":{},"sourceType":"module"}