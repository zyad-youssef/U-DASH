{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"icon\", \"iconColor\", \"size\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { minorScale } from '../../scales';\nimport Text from './Text';\nvar ListItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function ListItem(props, ref) {\n  var children = props.children,\n      icon = props.icon,\n      iconColor = props.iconColor,\n      size = props.size,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var paddingLeft;\n  if (size === 300) paddingLeft = minorScale(1);\n  if (size === 400) paddingLeft = minorScale(2);\n  if (size === 500) paddingLeft = minorScale(2);\n  if (size === 600) paddingLeft = minorScale(3);\n  var iconTop;\n  if (size === 300) iconTop = 1;\n  if (size === 400) iconTop = 3;\n  if (size === 500) iconTop = 3;\n  if (size === 600) iconTop = 4;\n  var iconSize;\n  if (size === 300) iconSize = 12;\n  if (size === 400) iconSize = 14;\n  if (size === 500) iconSize = 14;\n  if (size === 600) iconSize = 16;\n  var iconLeft = -iconSize - 4;\n  if (size === 600) iconLeft = -iconSize;\n  return /*#__PURE__*/React.createElement(Text, _extends({\n    is: \"li\",\n    position: \"relative\",\n    marginY: \"0.5em\",\n    size: size,\n    listStyleType: icon ? 'none' : undefined,\n    paddingLeft: icon ? paddingLeft : undefined,\n    ref: ref\n  }, rest), icon && /*#__PURE__*/React.createElement(IconWrapper, {\n    icon: icon,\n    color: iconColor,\n    position: \"absolute\",\n    size: iconSize,\n    left: iconLeft,\n    top: iconTop\n  }), children);\n}));\nListItem.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  /**\n   * When provided, adds a icon before the list item.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The color of the icon.\n   */\n  iconColor: PropTypes.string\n});\nexport default ListItem;","map":null,"metadata":{},"sourceType":"module"}