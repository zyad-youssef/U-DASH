{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconSize\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport Button, { getIconSizeForButton, internalStyles, pseudoSelectors } from './Button';\nvar IconButton = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function IconButton(props, ref) {\n  var icon = props.icon,\n      iconSize = props.iconSize,\n      restProps = _objectWithoutProperties(props, _excluded); // modifiers\n\n\n  var appearance = props.appearance,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size; // Composes the exact same styles as button\n\n  var styleProps = useStyleConfig('Button', {\n    appearance: appearance,\n    intent: intent,\n    size: size\n  }, pseudoSelectors, internalStyles);\n  var height = restProps.height || styleProps.height;\n  var relativeIconSize = getIconSizeForButton(height);\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    ref: ref,\n    paddingLeft: 0,\n    paddingRight: 0,\n    flex: \"none\",\n    height: height,\n    width: height,\n    minWidth: height\n  }, restProps), /*#__PURE__*/React.createElement(IconWrapper, {\n    icon: icon,\n    color: intent === 'none' ? 'default' : 'currentColor',\n    size: iconSize || relativeIconSize\n  }));\n}));\nIconButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * The size of the button\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The Evergreen icon or custom icon to render\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: PropTypes.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjunction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default IconButton;","map":null,"metadata":{},"sourceType":"module"}