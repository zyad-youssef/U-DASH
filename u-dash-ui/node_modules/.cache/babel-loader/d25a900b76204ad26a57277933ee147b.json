{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"color\", \"fontFamily\", \"size\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { useTheme } from '../../theme';\nvar emptyObject = {};\nvar Paragraph = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Paragraph(props, ref) {\n  var _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$fontFamily = props.fontFamily,\n      fontFamily = _props$fontFamily === void 0 ? 'ui' : _props$fontFamily,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 400 : _props$size,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var theme = useTheme();\n  var colors = theme.colors,\n      fontFamilies = theme.fontFamilies;\n  var themedFontFamily = fontFamilies[fontFamily] || fontFamily;\n  var themedColor = colors[color] || colors.text && colors.text[color] || color;\n  var textStyle = useStyleConfig('Paragraph', {\n    size: size\n  }, emptyObject, emptyObject);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"p\",\n    ref: ref\n  }, textStyle, {\n    fontFamily: themedFontFamily,\n    color: themedColor\n  }, restProps));\n}));\nParagraph.propTypes = _objectSpread(_objectSpread({}, Box.propTypes), {}, {\n  /**\n   * Size of the text style.\n   * Can be: 300, 400, 500, `small`, `medium`, `large`.\n   */\n  size: PropTypes.oneOf([300, 400, 500, 'small', 'medium', 'large']),\n\n  /**\n   * Font family.\n   * Can be: `ui`, `display` or `mono` or a custom font family.\n   */\n  fontFamily: PropTypes.string\n});\nexport default Paragraph;","map":null,"metadata":{},"sourceType":"module"}