{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"description\", \"id\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState } from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { StackingOrder } from '../../constants';\nimport Toast from './Toast';\nvar wrapperClass = css({\n  maxWidth: 560,\n  margin: '0 auto',\n  top: 0,\n  left: 0,\n  right: 0,\n  position: 'fixed',\n  zIndex: StackingOrder.TOASTER,\n  pointerEvents: 'none'\n});\n\nvar hasCustomId = function hasCustomId(settings) {\n  return Object.hasOwnProperty.call(settings, 'id');\n};\n\nvar ToastManager = /*#__PURE__*/memo(function ToastManager(props) {\n  var bindCloseAll = props.bindCloseAll,\n      bindGetToasts = props.bindGetToasts,\n      bindNotify = props.bindNotify,\n      bindRemove = props.bindRemove;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      toasts = _useState2[0],\n      setToasts = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      idCounter = _useState4[0],\n      setIdCounter = _useState4[1];\n\n  var getToasts = function getToasts() {\n    return toasts;\n  };\n\n  var closeAll = function closeAll() {\n    setToasts(toasts.map(function (toast) {\n      return _objectSpread(_objectSpread({}, toast), {}, {\n        isShown: false\n      });\n    }));\n  };\n  /**\n   * This will set isShown on the Toast which will close the toast.\n   * It won't remove the toast until onExited triggers onRemove.\n   */\n\n\n  var closeToast = function closeToast(id) {\n    setToasts(toasts.map(function (toast) {\n      if (toast.id === id) {\n        return _objectSpread(_objectSpread({}, toast), {}, {\n          isShown: false\n        });\n      }\n\n      return toast;\n    }));\n  };\n\n  var safeCloseToast = function safeCloseToast(id) {\n    var toastToRemove = toasts.find(function (toast) {\n      return String(toast.id).startsWith(id);\n    });\n\n    if (toastToRemove) {\n      closeToast(toastToRemove.id);\n    }\n  };\n\n  var removeToast = function removeToast(id) {\n    var updatedToasts = toasts.filter(function (toast) {\n      return !String(toast.id).startsWith(id);\n    });\n    setToasts(updatedToasts);\n    return updatedToasts;\n  };\n\n  var createToastInstance = function createToastInstance(title, settings) {\n    var _settings$hasCloseBut;\n\n    var uniqueId = idCounter;\n    setIdCounter(idCounter + 1);\n    var id = hasCustomId(settings) ? \"\".concat(settings.id, \"-\").concat(uniqueId) : uniqueId;\n    return {\n      id: id,\n      title: title,\n      description: settings.description,\n      hasCloseButton: (_settings$hasCloseBut = settings.hasCloseButton) !== null && _settings$hasCloseBut !== void 0 ? _settings$hasCloseBut : true,\n      duration: settings.duration || 5,\n      close: function close() {\n        return safeCloseToast(id);\n      },\n      intent: settings.intent\n    };\n  };\n\n  var notify = function notify(title, settings) {\n    var tempToasts = toasts;\n\n    if (hasCustomId(settings)) {\n      tempToasts = removeToast(settings.id);\n    }\n\n    var instance = createToastInstance(title, settings);\n    setToasts([instance].concat(_toConsumableArray(tempToasts)));\n  };\n\n  bindNotify(notify);\n  bindRemove(safeCloseToast);\n  bindGetToasts(getToasts);\n  bindCloseAll(closeAll);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: wrapperClass\n  }, toasts.map(function (_ref) {\n    var description = _ref.description,\n        id = _ref.id,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    return /*#__PURE__*/React.createElement(Toast, _extends({\n      key: id,\n      onRemove: function onRemove() {\n        return removeToast(id);\n      }\n    }, rest), description);\n  }));\n});\nToastManager.propTypes = {\n  /**\n   * Function called with the `this.notify` function.\n   */\n  bindNotify: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.remove` function.\n   */\n  bindRemove: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.getToasts` function.\n   */\n  bindGetToasts: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.closeAll` function.\n   */\n  bindCloseAll: PropTypes.func.isRequired\n};\nexport default ToastManager;","map":null,"metadata":{},"sourceType":"module"}