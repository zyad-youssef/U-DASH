{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"accountForScrollbar\", \"children\", \"className\"],\n    _excluded2 = [\"className\", \"height\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport ScrollbarSize from './ScrollbarSize';\nvar emptyObject = {};\nvar pseudoSelectors = {\n  _firstOfType: '&:first-of-type'\n};\nvar internalStyles = {\n  display: 'flex',\n  flexShrink: 0\n};\nvar TableHead = /*#__PURE__*/memo(function TableHead(props) {\n  var _props$accountForScro = props.accountForScrollbar,\n      accountForScrollbar = _props$accountForScro === void 0 ? true : _props$accountForScro,\n      children = props.children,\n      className = props.className,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrollbarWidth = _useState2[0],\n      setScrollBarWidth = _useState2[1];\n\n  var _useStyleConfig = useStyleConfig('TableHead', emptyObject, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      themeHeight = _useStyleConfig.height,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var height = rest.height || themeHeight;\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    paddingRight: scrollbarWidth,\n    className: cx(themedClassName, className),\n    height: height\n  }, boxProps, rest), children, \" \", accountForScrollbar && /*#__PURE__*/React.createElement(ScrollbarSize, {\n    handleScrollbarSize: setScrollBarWidth\n  }));\n});\nTableHead.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * The height of the table head.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * This should always be true if you are using TableHead together with a TableBody.\n   * Because TableBody has `overflowY: scroll` by default.\n   */\n  accountForScrollbar: PropTypes.bool\n});\nexport default TableHead;","map":null,"metadata":{},"sourceType":"module"}