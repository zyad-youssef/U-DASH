{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '../../buttons';\nimport { Pane } from '../../layers';\nimport { majorScale, minorScale } from '../../scales';\nimport { useTheme } from '../../theme';\nimport { Link, Heading, Paragraph } from '../../typography';\n/* eslint-disable react/prop-types */\n\nvar HorizontalOrientation = /*#__PURE__*/memo(function HorizontalOrientation(_ref) {\n  var anchorCta = _ref.anchorCta,\n      background = _ref.background,\n      description = _ref.description,\n      icon = _ref.icon,\n      iconBgColor = _ref.iconBgColor,\n      primaryCta = _ref.primaryCta,\n      title = _ref.title;\n  var hasFooter = primaryCta || anchorCta;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var backgroundColor = background === 'light' ? 'white' : colors.gray75;\n  return /*#__PURE__*/React.createElement(Pane, {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: majorScale(6),\n    backgroundColor: backgroundColor,\n    justifyContent: \"center\"\n  }, /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    flex: 1,\n    height: \"100%\"\n  }, /*#__PURE__*/React.createElement(Pane, {\n    paddingRight: majorScale(6)\n  }, /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"50%\",\n    backgroundColor: iconBgColor,\n    width: majorScale(9),\n    height: majorScale(9)\n  }, /*#__PURE__*/React.cloneElement(icon, {\n    size: majorScale(4)\n  }))), /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    paddingRight: majorScale(6)\n  }, /*#__PURE__*/React.createElement(Heading, {\n    size: 500,\n    color: colors.gray700\n  }, title), description && /*#__PURE__*/React.createElement(Paragraph, {\n    color: \"muted\",\n    marginTop: majorScale(2)\n  }, description), hasFooter && /*#__PURE__*/React.createElement(Pane, {\n    marginTop: majorScale(5),\n    display: \"flex\"\n  }, primaryCta, primaryCta && anchorCta && /*#__PURE__*/React.cloneElement(anchorCta, {\n    marginLeft: majorScale(4)\n  }), !primaryCta && anchorCta))));\n});\n/* eslint-enable react/prop-types */\n\n/* eslint-disable react/prop-types */\n\nvar VerticalOrientation = /*#__PURE__*/memo(function VerticalOrientation(_ref2) {\n  var background = _ref2.background,\n      description = _ref2.description,\n      icon = _ref2.icon,\n      iconBgColor = _ref2.iconBgColor,\n      primaryCta = _ref2.primaryCta,\n      title = _ref2.title;\n\n  var _useTheme2 = useTheme(),\n      colors = _useTheme2.colors;\n\n  var backgroundColor = background === 'light' ? 'white' : colors.gray75;\n  return /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    flex: 1,\n    backgroundColor: backgroundColor,\n    paddingX: majorScale(5),\n    paddingY: majorScale(5),\n    height: \"100%\",\n    width: \"100%\"\n  }, /*#__PURE__*/React.createElement(Pane, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderRadius: \"50%\",\n    backgroundColor: iconBgColor,\n    width: majorScale(7),\n    height: majorScale(7)\n  }, /*#__PURE__*/React.cloneElement(icon, {\n    size: majorScale(3)\n  })), /*#__PURE__*/React.createElement(Heading, {\n    marginTop: majorScale(2),\n    textAlign: \"center\",\n    color: colors.gray700\n  }, title), /*#__PURE__*/React.createElement(Paragraph, {\n    marginTop: majorScale(2),\n    textAlign: \"center\",\n    color: colors.gray700\n  }, description), primaryCta && /*#__PURE__*/React.cloneElement(primaryCta, {\n    marginTop: minorScale(5)\n  }));\n});\n/* eslint-enable react/prop-types */\n\nvar PrimaryButton = function PrimaryButton(props) {\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    appearance: \"primary\"\n  }, props));\n};\n\nPrimaryButton.displayName = \"PrimaryButton\";\n\nvar LinkButton = function LinkButton(props) {\n  return /*#__PURE__*/React.createElement(Link, _extends({}, props, {\n    size: 300,\n    lineHeight: \"34px\"\n  }));\n};\n\nLinkButton.displayName = \"LinkButton\";\nvar EmptyState = /*#__PURE__*/memo(function EmptyState(_ref3) {\n  var anchorCta = _ref3.anchorCta,\n      _ref3$background = _ref3.background,\n      background = _ref3$background === void 0 ? 'light' : _ref3$background,\n      description = _ref3.description,\n      icon = _ref3.icon,\n      iconBgColor = _ref3.iconBgColor,\n      _ref3$orientation = _ref3.orientation,\n      orientation = _ref3$orientation === void 0 ? 'horizontal' : _ref3$orientation,\n      primaryCta = _ref3.primaryCta,\n      title = _ref3.title;\n\n  if (orientation === 'vertical') {\n    return /*#__PURE__*/React.createElement(VerticalOrientation, {\n      title: title,\n      icon: icon,\n      iconBgColor: iconBgColor,\n      background: background,\n      description: description,\n      primaryCta: primaryCta\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(HorizontalOrientation, {\n      title: title,\n      icon: icon,\n      iconBgColor: iconBgColor,\n      background: background,\n      description: description,\n      primaryCta: primaryCta,\n      anchorCta: anchorCta\n    });\n  }\n});\nEmptyState.PrimaryButton = PrimaryButton;\nEmptyState.LinkButton = LinkButton;\nEmptyState.propTypes = {\n  /** The title of the empty state */\n  title: PropTypes.string.isRequired,\n\n  /** The icon used in the empty state */\n  icon: PropTypes.element.isRequired,\n\n  /** The background color used for the icon circle */\n  iconBgColor: PropTypes.string.isRequired,\n\n  /** The direction in which to align the empty state elements */\n  orientation: PropTypes.oneOf(['vertical', 'horizontal']),\n\n  /** The description of the empty state */\n  description: PropTypes.node,\n\n  /** The background used for the entire empty state container */\n  background: PropTypes.oneOf(['light', 'dark']),\n\n  /** The primary CTA of the empty state */\n  primaryCta: PropTypes.element,\n\n  /** The link CTA of the empty state */\n  anchorCta: PropTypes.element\n};\nexport default EmptyState;","map":null,"metadata":{},"sourceType":"module"}