{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"className\", \"color\", \"isInteractive\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { useStyleConfig } from '../../hooks';\nimport { Strong } from '../../typography';\nvar pseudoSelectors = {};\nvar internalStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  verticalAlign: 'middle'\n};\nvar hoverClassName = css({\n  '&:hover': {\n    opacity: 0.8\n  },\n  cursor: 'pointer'\n});\nvar Badge = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Badge(props, ref) {\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'subtle' : _props$appearance,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'neutral' : _props$color,\n      _props$isInteractive = props.isInteractive,\n      isInteractive = _props$isInteractive === void 0 ? false : _props$isInteractive,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var _useStyleConfig = useStyleConfig('Badge', {\n    appearance: appearance,\n    color: color\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Strong, _extends({\n    ref: ref,\n    size: 300,\n    className: cx(className, themedClassName, isInteractive && hoverClassName)\n  }, styleProps, restProps));\n}));\nBadge.propTypes = _objectSpread(_objectSpread({}, Strong.propTypes), {}, {\n  /**\n   * The color used for the badge.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Whether or not to apply hover/focus/active styles\n   */\n  isInteractive: PropTypes.bool\n});\nexport default Badge;","map":null,"metadata":{},"sourceType":"module"}