{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"color\", \"name\", \"size\", \"svgPaths16\", \"svgPaths20\", \"title\"],\n    _excluded2 = [\"className\"];\nimport React, { forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nvar pseudoSelectors = {};\nvar internalStyles = {};\nvar Icon = /*#__PURE__*/forwardRef(function Icon(_ref, ref) {\n  var className = _ref.className,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      name = _ref.name,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 16 : _ref$size,\n      svgPaths16 = _ref.svgPaths16,\n      svgPaths20 = _ref.svgPaths20,\n      title = _ref.title,\n      svgProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _useStyleConfig = useStyleConfig('Icon', {\n    color: color\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      styleProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var SIZE_STANDARD = 16;\n  var SIZE_LARGE = 20; // Choose which pixel grid is most appropriate for given icon size\n\n  var pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD;\n  var pathStrings = pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20;\n  var paths = pathStrings.map(function (d, i) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"path\", {\n        key: i,\n        d: d,\n        fillRule: \"evenodd\"\n      })\n    );\n  });\n  var viewBox = \"0 0 \".concat(pixelGridSize, \" \").concat(pixelGridSize);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"svg\",\n    ref: ref,\n    className: cx(className, themedClassName)\n  }, styleProps, svgProps, {\n    \"data-icon\": name,\n    width: size,\n    height: size,\n    viewBox: viewBox\n  }), title && /*#__PURE__*/React.createElement(\"title\", null, title), paths);\n});\nIcon.propTypes = {\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Name of the icon\n   */\n  name: PropTypes.string,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string,\n  svgPaths16: PropTypes.arrayOf(PropTypes.string).isRequired,\n  svgPaths20: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default Icon;","map":null,"metadata":{},"sourceType":"module"}