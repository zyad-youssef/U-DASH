{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isRemovable\", \"onRemove\"];\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge } from '../../badges';\nimport { CrossIcon } from '../../icons';\nimport { minorScale } from '../../scales';\nvar Tag = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Tag(props, ref) {\n  var children = props.children,\n      isRemovable = props.isRemovable,\n      onRemove = props.onRemove,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var badgeStyles = {\n    alignItems: 'center',\n    display: 'inline-flex',\n    fontWeight: 400,\n    borderRadius: 4,\n    paddingX: 8,\n    paddingY: 6,\n    marginTop: 0,\n    marginBottom: 0,\n    textTransform: 'none'\n  };\n\n  if (isRemovable) {\n    badgeStyles.paddingRight = minorScale(1);\n  }\n\n  return /*#__PURE__*/React.createElement(Badge, _extends({\n    ref: ref,\n    isInteractive: true\n  }, badgeStyles, restProps), children, isRemovable && /*#__PURE__*/React.createElement(CrossIcon, {\n    marginLeft: minorScale(1),\n    onClick: onRemove,\n    size: minorScale(3)\n  }));\n}));\nTag.propTypes = {\n  /** The tag content */\n  children: PropTypes.node,\n\n  /**\n   * Callback invoked when the removal icon is clicked.\n   * (event) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Whether or not the tag can be removed. */\n  isRemovable: PropTypes.bool\n};\nexport default Tag;","map":null,"metadata":{},"sourceType":"module"}