{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useMemo, useRef } from 'react';\nimport { css } from 'glamor';\nimport merge from 'lodash.merge';\nimport isEqual from 'react-fast-compare';\nimport { splitBoxProps } from 'ui-box';\nimport { useTheme, get, resolveThemeTokens } from '../theme';\n/**\n * @typedef {object} StateStyles\n * @property {import('csstype').Properties} [_hover]\n * @property {import('csstype').Properties} [_active]\n * @property {import('csstype').Properties} [_disabled]\n * @property {import('csstype').Properties} [_focus]\n * @property {import('csstype').Properties} [_invalid]\n */\n\n/**\n * @typedef {{ [placeholder in keyof StateStyles]: string }} PseudoSelectors\n */\n\n/**\n * @typedef {object} StyleModifiers\n * @property {string} [appearance]\n * @property {string} [size]\n */\n\n/** @typedef {import('ui-box').EnhancerProps & StateStyles} Style */\n\n/** @typedef {import('ui-box').EnhancerProps & import('glamor').CSSProperties} GlamorAndBoxStyle */\n\n/**\n * @typedef {object} StyleConfig\n * @property {Style} baseStyle\n * @property {{ [appearance: string]: Style }} [appearances]\n * @property {{ [size: string]: Style }} [sizes]\n */\n\nfunction maybeRun(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return typeof value === 'function' ? value.apply(void 0, args) : value;\n}\n\nfunction maybeRunDeep(raw) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  if (raw && _typeof(raw) === 'object') {\n    var result = {};\n\n    for (var _i = 0, _Object$keys = Object.keys(raw); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      result[key] = maybeRunDeep.apply(void 0, [raw[key]].concat(args));\n    }\n\n    return result;\n  }\n\n  return maybeRun.apply(void 0, [raw].concat(args));\n}\n/**\n * Combines styles from a styleConfig, with the given style modifiers (appearance, size, etc) and internal styles\n * @param {object} theme\n * @param {StyleModifiers} props\n * @param {StyleConfig} styleConfig\n * @param {GlamorAndBoxStyle} [internalStyles]\n * @returns {StyleConfig}\n */\n\n\nfunction combineStyles(theme, props, styleConfig) {\n  var internalStyles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var config = maybeRun(styleConfig, theme, props);\n  var baseStyle = maybeRunDeep(config.baseStyle, theme, props);\n  var sizeStyle = maybeRunDeep(get(config, \"sizes.\".concat(props.size), {}), theme, props);\n  var appearanceStyle = maybeRunDeep(get(config, \"appearances.\".concat(props.appearance), {}), theme, props);\n  return merge({}, internalStyles, baseStyle, sizeStyle, appearanceStyle);\n}\n/**\n * Combines a styleConfig object with internal styles based on the theme + style modifiers (props)\n * and returns a memoized style object\n * @returns {StyleConfig}\n */\n\n\nfunction useMergedStyles(theme, props, styleConfig, internalStyles) {\n  var styleRef = useRef({});\n  return useMemo(function () {\n    var combinedStyles = combineStyles(theme, props, styleConfig, internalStyles);\n\n    if (!isEqual(styleRef.current, combinedStyles)) {\n      styleRef.current = combinedStyles;\n    }\n\n    return styleRef.current;\n  }, [theme, props, styleConfig, internalStyles]);\n}\n/**\n * Split up the style props into glamor-ready and box-ready props (className + spreadable props)\n */\n\n\nfunction useGlamorAndBox(styles, pseudoSelectors) {\n  var glamorStylesRef = useRef({});\n  var classNameRef = useRef();\n  return useMemo(function () {\n    // Split the resulting style object into ui-box-compatible props and the rest\n    var _splitBoxProps = splitBoxProps(styles),\n        matchedProps = _splitBoxProps.matchedProps,\n        remainingProps = _splitBoxProps.remainingProps;\n    /** @type {GlamorAndBoxStyle} */\n\n\n    var glamorStyles = {}; // Swap out pseudo selector placeholders for their actual css selector strings\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(remainingProps); _i2 < _Object$keys2.length; _i2++) {\n      var k = _Object$keys2[_i2];\n      var key = k in pseudoSelectors ? pseudoSelectors[k] : k;\n      glamorStyles[key] = remainingProps[k];\n    } // Take all the \"non-compatible\" props and give those to glamor (since ui-box doesn't know how to handle them yet)\n\n\n    if (!isEqual(glamorStylesRef.current, glamorStyles)) {\n      var className = css(glamorStyles).toString();\n      glamorStylesRef.current = glamorStyles;\n      classNameRef.current = className === 'css-nil' ? undefined : className;\n    }\n\n    return _objectSpread({\n      className: classNameRef.current\n    }, matchedProps);\n  }, [styles, pseudoSelectors]);\n}\n/**\n * Takes a styleConfig object and outputs a `className` and `boxProps` that can be spread on a Box component\n * @param {string} componentKey the name of the component in the theme\n * @param {StyleModifiers} props props that modify the resulting visual style (e.g. `size` or `appearance`)\n * @param {PseudoSelectors} pseudoSelectors mapping for the component between states and actual pseudo selectors\n * @param {GlamorAndBoxStyle} [internalStyles] additional styles that are specified internally, separate from the visual styles\n * @returns {{ className: string; boxProps: import('ui-box').EnhancerProps }}\n */\n\n\nexport function useStyleConfig(componentKey, props, pseudoSelectors, internalStyles) {\n  var theme = useTheme(); // Get the component style object from the theme\n\n  var componentStyles = get(theme, \"components.\".concat(componentKey)) || {}; // Merges the theme styles with the modifiers/props (appearance, size, etc)\n\n  var mergedStyles = useMergedStyles(theme, props, componentStyles, internalStyles); // Resolve theme token strings found throughout the style object\n\n  var styles = useMemo(function () {\n    return resolveThemeTokens(theme, mergedStyles);\n  }, [theme, mergedStyles]); // Finally, split up the styles based which ones Box supports and the rest construct a glamor className\n\n  return useGlamorAndBox(styles, pseudoSelectors);\n}","map":null,"metadata":{},"sourceType":"module"}