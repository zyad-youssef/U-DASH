{"ast":null,"code":"import React from 'react';\n\nfunction setRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (ref && 'current' in ref) {\n    ref.current = node;\n  }\n}\n/**\n * React hook that merges up to two React refs into a single memoized function React Ref\n * @param {import('react').Ref<any>} refA\n * @param {import('react').Ref<any>} [refB]\n */\n\n\nexport function useMergedRef(refA, refB) {\n  return React.useMemo(function () {\n    if (!refA && !refB) {\n      return null;\n    }\n\n    return function (node) {\n      setRef(refA, node);\n      setRef(refB, node);\n    };\n  }, [refA, refB]);\n}","map":null,"metadata":{},"sourceType":"module"}