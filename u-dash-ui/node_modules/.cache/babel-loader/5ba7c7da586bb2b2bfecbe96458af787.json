{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"children\", \"intent\", \"appearance\", \"tabIndex\", \"onClick\", \"onKeyDown\", \"onSelect\", \"onDeselect\", \"isHighlighted\", \"isSelectable\", \"isSelected\"],\n    _excluded2 = [\"className\", \"height\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useRef, useCallback } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useClickable, useLatest, useMergedRef, useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport safeInvoke from '../../lib/safe-invoke';\nimport manageTableRowFocusInteraction from './manageTableRowFocusInteraction';\n\nvar noop = function noop() {};\n\nexport var pseudoSelectors = {\n  _hover: '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):not(:focus):not(:active):hover',\n  _focus: '&[data-isselectable=\"true\"]:not([aria-checked=\"true\"]):not([aria-current=\"true\"]):focus, &[aria-selected=\"true\"]',\n  _active: '&[aria-current=\"true\"], &[data-isselectable=\"true\"]:active',\n  _current: '&[aria-current=\"true\"], &[aria-checked=\"true\"]',\n  _lastOfType: '&:last-of-type',\n  _isSelectable: '&[data-isselectable=\"true\"]'\n};\nvar internalStyles = {\n  display: 'flex'\n};\nvar TableRow = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TableRow(props, forwardedRef) {\n  var className = props.className,\n      children = props.children,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,\n      onClick = props.onClick,\n      _props$onKeyDown = props.onKeyDown,\n      onKeyDown = _props$onKeyDown === void 0 ? noop : _props$onKeyDown,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      _props$onDeselect = props.onDeselect,\n      onDeselect = _props$onDeselect === void 0 ? noop : _props$onDeselect,\n      isHighlighted = props.isHighlighted,\n      isSelectable = props.isSelectable,\n      isSelected = props.isSelected,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var mainRef = useRef();\n  var onRef = useMergedRef(mainRef, forwardedRef);\n  var onClickRef = useLatest(onClick);\n  var onKeyDownRef = useLatest(onKeyDown);\n  var onDeselectRef = useLatest(onDeselect);\n  var onSelectRef = useLatest(onSelect);\n  var handleClick = useCallback(function (event) {\n    safeInvoke(onClickRef.current, event);\n\n    if (isSelectable) {\n      if (isSelected) {\n        safeInvoke(onDeselectRef.current);\n      } else {\n        safeInvoke(onSelectRef.current);\n      }\n    }\n  }, // These \"missing\" deps are all refs\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isSelected, isSelectable]);\n  var handleKeyDown = useCallback(function (event) {\n    safeInvoke(onKeyDownRef.current, event);\n\n    if (isSelectable) {\n      if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n        try {\n          manageTableRowFocusInteraction(event.key, mainRef.current);\n        } catch (_) {}\n      } else if (event.key === 'Escape') {\n        if (mainRef.current && mainRef.current instanceof Node) mainRef.current.blur();\n      }\n    }\n  }, // These \"missing\" deps are all refs\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isSelectable]);\n  var clickable = useClickable({\n    onKeyDown: handleKeyDown,\n    tabIndex: tabIndex\n  });\n\n  var _useStyleConfig = useStyleConfig('TableRow', {\n    appearance: appearance,\n    intent: intent\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      themeHeight = _useStyleConfig.height,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var height = rest.height || themeHeight;\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    ref: onRef,\n    className: cx(themedClassName, className),\n    \"aria-selected\": isHighlighted,\n    \"aria-current\": isSelected,\n    \"data-isselectable\": isSelectable,\n    tabIndex: isSelectable ? clickable.tabIndex : undefined,\n    onClick: handleClick,\n    onKeyDown: clickable.onKeyDown,\n    borderBottom: \"muted\",\n    height: height\n  }, boxProps, rest), children);\n}));\nTableRow.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * The height of the row. Remember to add paddings when using \"auto\".\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * Makes the TableRow selectable.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * Makes the TableRow selected.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Manually set the TableRow to be highlighted.\n   */\n  isHighlighted: PropTypes.bool,\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Class name passed to the table row.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TableRow;","map":null,"metadata":{},"sourceType":"module"}