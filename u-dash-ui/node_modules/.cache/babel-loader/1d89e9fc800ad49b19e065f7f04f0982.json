{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"size\", \"label\", \"defaultValue\", \"value\", \"options\", \"onChange\", \"isRequired\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, position, layout, dimensions } from 'ui-box';\nimport { useId } from '../../hooks';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport Radio from './Radio';\n\nvar noop = function noop() {};\n\nvar emptyArray = [];\nvar RadioGroup = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function RadioGroup(props, ref) {\n  var _props$size = props.size,\n      size = _props$size === void 0 ? 12 : _props$size,\n      label = props.label,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      _props$options = props.options,\n      options = _props$options === void 0 ? emptyArray : _props$options,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? noop : _props$onChange,\n      _props$isRequired = props.isRequired,\n      isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var name = useId('RadioGroup');\n  var selected = value || defaultValue || props.options[0].value;\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    role: \"group\",\n    \"aria-label\": label\n  }, rest, {\n    ref: ref\n  }), label && /*#__PURE__*/React.createElement(Text, {\n    color: \"muted\",\n    fontWeight: 500\n  }, label), options.map(function (item) {\n    return /*#__PURE__*/React.createElement(Radio, {\n      key: item.value,\n      size: size,\n      name: name,\n      value: item.value,\n      label: item.label,\n      checked: selected === item.value,\n      disabled: item.isDisabled,\n      onChange: onChange,\n      isRequired: isRequired\n    });\n  }));\n}));\nRadioGroup.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The options for the radios of the Radio Group.\n   */\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node.isRequired,\n    value: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool\n  })).isRequired,\n\n  /**\n   * The selected item value when controlled.\n   */\n  value: PropTypes.string,\n\n  /**\n   * The default value of the Radio Group when uncontrolled.\n   */\n  defaultValue: PropTypes.string,\n\n  /**\n   * Function called when state changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Label to display above the radio button options.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The size of the radio circle. This also informs the text size and spacing.\n   */\n  size: PropTypes.oneOf([12, 16]),\n\n  /**\n   * When true, the radio get the required attribute.\n   */\n  isRequired: PropTypes.bool\n});\nexport default RadioGroup;","map":null,"metadata":{},"sourceType":"module"}