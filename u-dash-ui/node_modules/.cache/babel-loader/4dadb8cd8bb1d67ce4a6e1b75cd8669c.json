{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { memo, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nvar noop = function noop() {};\n\nvar style = {\n  position: 'fixed',\n  top: -500,\n  left: -500,\n  width: 100,\n  overflowY: 'scroll'\n};\nvar ScrollbarSize = /*#__PURE__*/memo(function ScrollbarSize(_ref) {\n  var _ref$handleScrollbarS = _ref.handleScrollbarSize,\n      handleScrollbarSize = _ref$handleScrollbarS === void 0 ? noop : _ref$handleScrollbarS;\n  var innerRef = useRef();\n  var outerRef = useRef();\n\n  var _useState = useState({\n    innerWidth: null,\n    outerWidth: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      widths = _useState2[0],\n      setWidths = _useState2[1];\n\n  useEffect(function () {\n    var newWidths = {\n      innerWidth: null,\n      outerWidth: null\n    };\n\n    if (innerRef.current) {\n      newWidths.innerWidth = innerRef.current.getBoundingClientRect().width;\n    }\n\n    if (outerRef.current) {\n      newWidths.outerWidth = outerRef.current.getBoundingClientRect().width;\n    }\n\n    setWidths(newWidths);\n  }, []);\n  useEffect(function () {\n    if (widths.innerWidth && widths.outerWidth) {\n      handleScrollbarSize(widths.outerWidth - widths.innerWidth);\n    }\n  }, [widths, handleScrollbarSize]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: outerRef,\n    \"aria-hidden\": true,\n    style: style\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: innerRef\n  }));\n});\nScrollbarSize.propTypes = {\n  /**\n   * Returns the size of the scrollbar by creating a hidden fixed div.\n   */\n  handleScrollbarSize: PropTypes.func\n};\nexport default ScrollbarSize;","map":null,"metadata":{},"sourceType":"module"}