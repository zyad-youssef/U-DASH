{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport merge from 'lodash.merge';\nexport function get(obj, path, fallback) {\n  var keys = path && path.split ? path.split('.') : [path];\n  var value = obj;\n\n  var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      value = value ? value[key] : undefined;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return value === undefined ? fallback : value;\n}\n/**\n * Gets a value from the given theme based on a path when present,\n * else returns the provided value\n * @param {object} theme\n * @param {unknown} pathOrValue\n */\n\nexport function getValue(theme, pathOrValue) {\n  return get(theme, pathOrValue, pathOrValue);\n}\n/**\n * Adds or overrides theme values on top of an existing theme object\n * @param destinationTheme Theme object to merge on top of\n * @param sourceTheme Theme object that adds or overrides values\n */\n\nexport function mergeTheme(destinationTheme, sourceTheme) {\n  return merge({}, destinationTheme, sourceTheme);\n}\n/**\n * Resolves an object (or style config) when referencing theme paths\n * It will preserve the original object structure (nesting)\n * @param {object} theme\n * @param {object} obj\n * @returns {object} a new object with theme-resolved properties\n */\n\nexport function resolveThemeTokens(theme, obj) {\n  var result = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    var raw = obj[key];\n\n    if (raw === null) {\n      continue;\n    }\n\n    if (_typeof(raw) === 'object') {\n      result[key] = resolveThemeTokens(theme, raw);\n    } else {\n      result[key] = getValue(theme, raw);\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}