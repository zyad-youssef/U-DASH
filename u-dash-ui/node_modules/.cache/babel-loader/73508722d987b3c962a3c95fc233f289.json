{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"fill\", \"size\"],\n    _excluded2 = [\"id\", \"name\", \"label\", \"disabled\", \"isInvalid\", \"checked\", \"onChange\", \"value\", \"size\", \"isRequired\", \"appearance\"],\n    _excluded3 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { spacing, position, layout, dimensions } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { Text } from '../../typography';\nvar CircleIcon = /*#__PURE__*/memo(function CircleIcon(_ref) {\n  var _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? 'currentColor' : _ref$fill,\n      size = _ref.size,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: size,\n    height: size,\n    viewBox: \"0 0 10 10\"\n  }, props), /*#__PURE__*/React.createElement(\"circle\", {\n    fill: fill,\n    cx: \"5\",\n    cy: \"5\",\n    r: \"5\"\n  }));\n});\nCircleIcon.propTypes = {\n  fill: PropTypes.string,\n  size: PropTypes.number\n};\n\nvar noop = function noop() {};\n\nvar pseudoSelectors = {\n  _base: '& + div',\n  _disabled: '&[disabled] + div',\n  _hover: '&:not([disabled]):hover + div',\n  _focus: '&:not([disabled]):focus + div',\n  _active: '&:not([disabled]):active + div',\n  _checked: '&:checked + div, &[type=checkbox]:indeterminate + div',\n  _checkedHover: '&:not([disabled]):checked:hover + div, &[type=checkbox]:not([disabled]):indeterminate:hover + div',\n  _checkedActive: '&:not([disabled]):checked:active + div, &[type=checkbox]:not([disabled]):indeterminate:active + div',\n  _checkedDisabled: '&[disabled]:checked + div, &[type=checkbox][disabled]:indeterminate + div'\n};\n\nvar internalStyles = _defineProperty({\n  border: '0',\n  clip: 'rect(1px, 1px, 1px, 1px)',\n  height: '1px',\n  overflow: 'hidden',\n  padding: '0',\n  position: 'absolute',\n  whiteSpace: 'nowrap',\n  width: '1px',\n  opacity: '0'\n}, pseudoSelectors._base, {\n  WebkitFontSmoothing: 'antialiased',\n  textDecoration: 'none',\n  WebkitAppearance: 'none',\n  MozAppearance: 'none',\n  border: 'none',\n  outline: 'none',\n  cursor: 'pointer'\n});\n\nvar Radio = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Radio(props, ref) {\n  var id = props.id,\n      name = props.name,\n      label = props.label,\n      disabled = props.disabled,\n      _props$isInvalid = props.isInvalid,\n      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,\n      checked = props.checked,\n      _props$onChange = props.onChange,\n      onChange = _props$onChange === void 0 ? noop : _props$onChange,\n      value = props.value,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 12 : _props$size,\n      _props$isRequired = props.isRequired,\n      isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var _useStyleConfig = useStyleConfig('Radio', {\n    appearance: appearance\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded3);\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"label\",\n    ref: ref,\n    cursor: disabled ? 'not-allowed' : 'pointer',\n    position: \"relative\",\n    display: \"flex\",\n    marginY: size === 12 ? 8 : 12\n  }, rest), /*#__PURE__*/React.createElement(Box, _extends({\n    is: \"input\",\n    className: themedClassName,\n    id: id,\n    type: \"radio\",\n    name: name,\n    value: value,\n    checked: checked,\n    onChange: onChange,\n    disabled: disabled,\n    \"aria-invalid\": isInvalid\n  }, boxProps, {\n    required: isRequired\n  })), /*#__PURE__*/React.createElement(Box, {\n    boxSizing: \"border-box\",\n    borderRadius: 9999,\n    display: \"flex\",\n    flex: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 2,\n    width: size,\n    height: size\n  }, /*#__PURE__*/React.createElement(CircleIcon, {\n    size: size / 2\n  })), label && /*#__PURE__*/React.createElement(Text, {\n    marginLeft: size === 12 ? 8 : 10,\n    size: size === 12 ? 300 : 400,\n    color: disabled ? 'muted' : 'default'\n  }, label));\n}));\nRadio.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The id attribute of the radio.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The name attribute of the radio.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Label of the radio.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The value attribute of the radio.\n   */\n  value: PropTypes.string,\n\n  /**\n   * Function called when state changes\n   * Signature:\n   * ```\n   * function(event: object, checked: boolean) => void\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, the radio is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, the radio is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The size of the radio circle. This also informs the text size and spacing.\n   */\n  size: PropTypes.oneOf([12, 16]),\n\n  /**\n   * When true, the radio get the required attribute.\n   */\n  isRequired: PropTypes.bool,\n\n  /**\n   * When true, the aria-invalid attribute is true.\n   * Used for accessibility.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * The appearance of the checkbox.\n   * The default theme only comes with a default style.\n   */\n  appearance: PropTypes.string\n});\nexport default Radio;","map":null,"metadata":{},"sourceType":"module"}