{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { memo, useRef, useState, useMemo, useCallback, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLatest } from '../../hooks';\nimport { Textarea } from '../../textarea';\n\nfunction getTableBodyRef(currentRef) {\n  var ref = currentRef;\n  if (!ref) return;\n\n  while (ref) {\n    var isTableBody = ref.hasAttribute('data-evergreen-table-body');\n\n    if (isTableBody) {\n      return ref;\n    }\n\n    if (ref.parentElement) {\n      ref = ref.parentElement;\n    } else {\n      return null;\n    }\n  }\n\n  return ref;\n}\n\nvar EditableCellField = /*#__PURE__*/memo(function EditableCellField(props) {\n  var _props$minHeight = props.minHeight,\n      minHeight = _props$minHeight === void 0 ? 40 : _props$minHeight,\n      _props$minWidth = props.minWidth,\n      minWidth = _props$minWidth === void 0 ? 80 : _props$minWidth,\n      size = props.size,\n      value = props.value,\n      zIndex = props.zIndex;\n  var latestAnimationFrame = useRef();\n  var textareaRef = useRef();\n  var tableBodyRef = useRef();\n  var onCancelRef = useLatest(props.onCancel);\n  var onChangeCompleteRef = useLatest(props.onChangeComplete);\n  var getTargetRef = useLatest(props.getTargetRef);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      height = _useState2[0],\n      setHeight = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      width = _useState4[0],\n      setWidth = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      left = _useState6[0],\n      setLeft = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      top = _useState8[0],\n      setTop = _useState8[1];\n\n  var update = useCallback(function () {\n    function updater() {\n      var targetRef = getTargetRef.current();\n      if (!targetRef) return;\n      tableBodyRef.current = getTableBodyRef(targetRef);\n\n      var _targetRef$getBoundin = targetRef.getBoundingClientRect(),\n          targetHeight = _targetRef$getBoundin.height,\n          targetLeft = _targetRef$getBoundin.left,\n          targetTop = _targetRef$getBoundin.top,\n          targetWidth = _targetRef$getBoundin.width;\n\n      var calculatedTop;\n\n      if (tableBodyRef.current) {\n        var bounds = tableBodyRef.current.getBoundingClientRect();\n        calculatedTop = Math.min(Math.max(targetTop, bounds.top), bounds.bottom - targetHeight);\n      } else {\n        calculatedTop = targetTop;\n      }\n\n      setHeight(targetHeight);\n      setWidth(targetWidth);\n      setLeft(targetLeft);\n      setTop(calculatedTop); // recursively run the updater\n\n      latestAnimationFrame.current = requestAnimationFrame(function () {\n        return updater();\n      });\n    } // kick off the updater\n\n\n    updater(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Mirrors functionality of componentDidMount and componentWillUnmount.\n  // Focus on mount\n\n  useLayoutEffect(function () {\n    update();\n    var requestId = requestAnimationFrame(function () {\n      if (textareaRef.current) {\n        textareaRef.current.focus();\n      }\n    });\n    return function () {\n      cancelAnimationFrame(requestId);\n\n      if (latestAnimationFrame.current) {\n        cancelAnimationFrame(latestAnimationFrame.current);\n      } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n      onCancelRef.current();\n    }; // we only want `update` to run once, and `onCancelRef` is a ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var handleFocus = useCallback(function (e) {\n    e.target.selectionStart = e.target.value.length;\n  }, []);\n  var handleBlur = useCallback(function () {\n    if (textareaRef.current) {\n      onChangeCompleteRef.current(textareaRef.current.value);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleKeyDown = useCallback(function (e) {\n    switch (e.key) {\n      case 'Escape':\n        onCancelRef.current();\n        if (textareaRef.current) textareaRef.current.blur();\n        break;\n\n      case 'Enter':\n        if (textareaRef.current) textareaRef.current.blur();\n        e.preventDefault();\n        break;\n\n      case 'Tab':\n        if (textareaRef.current) textareaRef.current.blur();\n        break;\n\n      default:\n        break;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var style = useMemo(function () {\n    return {\n      left: left,\n      top: top,\n      height: height,\n      minHeight: Math.max(height, minHeight),\n      width: width,\n      minWidth: Math.max(width, minWidth),\n      zIndex: zIndex\n    };\n  }, [left, top, height, width, minHeight, minWidth, zIndex]);\n  return /*#__PURE__*/React.createElement(Textarea, {\n    ref: textareaRef,\n    onKeyDown: handleKeyDown,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    appearance: \"editable-cell\",\n    size: size,\n    style: style,\n    height: null,\n    width: null,\n    minHeight: null,\n    position: \"fixed\",\n    defaultValue: value\n  });\n});\nEditableCellField.propTypes = {\n  /**\n   * Used as the defaultValue of the textarea.\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * The z-index placed on the element.\n   */\n  zIndex: PropTypes.number.isRequired,\n\n  /**\n   * Function to get the target ref of the parent.\n   * Used to mirror the position.\n   */\n  getTargetRef: PropTypes.func.isRequired,\n\n  /**\n   * Min width of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minWidth: PropTypes.number,\n\n  /**\n   * Min height of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minHeight: PropTypes.number,\n\n  /**\n   * Called when the textarea is blurred, pass the value back to the cell.\n   */\n  onChangeComplete: PropTypes.func.isRequired,\n\n  /**\n   * Called when Escape is hit or componentWillUnmount.\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Text size of the textarea.\n   */\n  size: PropTypes.number\n};\nexport default EditableCellField;","map":null,"metadata":{},"sourceType":"module"}