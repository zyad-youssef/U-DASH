{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"description\", \"disabled\", \"isInvalid\", \"isLoading\", \"name\", \"onRemove\", \"sizeInBytes\", \"src\", \"type\", \"validationMessage\"],\n    _excluded2 = [\"className\"];\nimport React, { memo, forwardRef } from 'react';\nimport humanize from 'humanize-plus';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { IconButton } from '../../buttons';\nimport { useStyleConfig } from '../../hooks';\nimport { InfoSignIcon, TrashIcon } from '../../icons';\nimport { Image } from '../../image';\nimport { Card } from '../../layers';\nimport hasValue from '../../lib/has-value';\nimport isFunction from '../../lib/is-function';\nimport { majorScale } from '../../scales';\nimport { Spinner } from '../../spinner';\nimport { useTheme } from '../../theme';\nimport { Paragraph } from '../../typography';\nimport getIconFromType from './utils/get-icon-from-type';\nimport isImage from './utils/is-image';\nvar imageSize = majorScale(5);\nvar styleModifiers = {};\nvar pseudoSelectors = {\n  _invalid: \"&[aria-invalid='true']\"\n};\nvar internalStyles = {};\nvar FileCard = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {\n  var description = props.description,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$isInvalid = props.isInvalid,\n      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,\n      _props$isLoading = props.isLoading,\n      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,\n      name = props.name,\n      onRemove = props.onRemove,\n      sizeInBytes = props.sizeInBytes,\n      src = props.src,\n      type = props.type,\n      validationMessage = props.validationMessage,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useStyleConfig = useStyleConfig('FileCard', styleModifiers, pseudoSelectors, internalStyles),\n      className = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var FileTypeIcon = getIconFromType(type);\n  var renderImage = hasValue(src) && isImage(type);\n  var renderInvalidIcon = !isLoading && isInvalid;\n  var renderDefaultIcon = !isLoading && !isInvalid;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginBottom: isInvalid ? majorScale(1) : majorScale(2)\n  }, /*#__PURE__*/React.createElement(Box, _extends({\n    \"aria-invalid\": isInvalid,\n    className: className\n  }, boxProps, rest), /*#__PURE__*/React.createElement(Box, {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\"\n  }, /*#__PURE__*/React.createElement(Box, {\n    marginLeft: majorScale(2),\n    marginRight: majorScale(1)\n  }, renderImage ? /*#__PURE__*/React.createElement(Image, {\n    height: imageSize,\n    src: src,\n    width: imageSize\n  }) : /*#__PURE__*/React.createElement(Card, {\n    alignItems: \"center\",\n    backgroundColor: isInvalid || isLoading ? undefined : colors.gray90,\n    display: \"flex\",\n    height: majorScale(5),\n    justifyContent: \"center\",\n    width: majorScale(5)\n  }, isLoading && /*#__PURE__*/React.createElement(Spinner, {\n    size: majorScale(2)\n  }), renderInvalidIcon && /*#__PURE__*/React.createElement(InfoSignIcon, {\n    color: colors.red500,\n    size: majorScale(2)\n  }), renderDefaultIcon && /*#__PURE__*/React.createElement(FileTypeIcon, {\n    color: colors.gray600,\n    size: majorScale(2)\n  }))), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    overflow: \"hidden\"\n  }, /*#__PURE__*/React.createElement(Paragraph, {\n    color: colors.gray800,\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\"\n  }, name), /*#__PURE__*/React.createElement(Paragraph, {\n    color: colors.gray700,\n    size: 300\n  }, hasValue(description) ? description : humanize.fileSize(sizeInBytes, 0))), isFunction(onRemove) && /*#__PURE__*/React.createElement(IconButton, {\n    appearance: \"minimal\",\n    disabled: disabled || isLoading,\n    icon: TrashIcon,\n    onClick: onRemove,\n    marginLeft: \"auto\",\n    marginRight: majorScale(2),\n    type: \"button\"\n  }))), hasValue(validationMessage) && /*#__PURE__*/React.createElement(Paragraph, {\n    color: colors.red500,\n    size: \"small\"\n  }, validationMessage));\n}));\nFileCard.propTypes = {\n  /**\n   * Description to display under the file name. If not provided, defaults to the file size\n   */\n  description: PropTypes.string,\n\n  /**\n   * Disables the button to remove the file\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, displays the card in an error state\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Sets a loading state on the card. If the remove button is rendered, it will be disabled\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Name of the file to display\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback to be fired when the remove button is clicked. If not provided, the button will not\n   * render\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * Size of the file\n   */\n  sizeInBytes: PropTypes.number,\n\n  /**\n   * Url of the uploaded image\n   */\n  src: PropTypes.string,\n\n  /**\n   * MimeType of the file to display, which controls what type of icon is rendered\n   */\n  type: PropTypes.string,\n\n  /**\n   * Message to display underneath the card\n   */\n  validationMessage: PropTypes.string\n};\nexport default FileCard;","map":null,"metadata":{},"sourceType":"module"}