{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo } from 'react';\nimport cx from 'classnames';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { Button, IconButton } from '../../buttons';\nimport { useStyleConfig } from '../../hooks';\nimport { CrossIcon } from '../../icons';\nimport { Pane } from '../../layers';\nimport { Overlay } from '../../overlay';\nimport { Paragraph, Heading } from '../../typography';\nvar animationEasing = {\n  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)'\n};\nvar ANIMATION_DURATION = 200;\nvar openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  },\n  to: {\n    transform: 'scale(1)',\n    opacity: 1\n  }\n});\nvar closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  }\n});\nvar animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: \"\".concat(openAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: \"\".concat(closeAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n  }\n};\n\nvar closeHandler = function closeHandler(close) {\n  return close();\n};\n\nvar emptyProps = {};\nvar Dialog = /*#__PURE__*/memo(function Dialog(_ref) {\n  var children = _ref.children,\n      _ref$cancelLabel = _ref.cancelLabel,\n      cancelLabel = _ref$cancelLabel === void 0 ? 'Cancel' : _ref$cancelLabel,\n      _ref$confirmLabel = _ref.confirmLabel,\n      confirmLabel = _ref$confirmLabel === void 0 ? 'Confirm' : _ref$confirmLabel,\n      _ref$containerProps = _ref.containerProps,\n      containerProps = _ref$containerProps === void 0 ? emptyProps : _ref$containerProps,\n      contentContainerProps = _ref.contentContainerProps,\n      footer = _ref.footer,\n      _ref$hasCancel = _ref.hasCancel,\n      hasCancel = _ref$hasCancel === void 0 ? true : _ref$hasCancel,\n      _ref$hasClose = _ref.hasClose,\n      hasClose = _ref$hasClose === void 0 ? true : _ref$hasClose,\n      _ref$hasFooter = _ref.hasFooter,\n      hasFooter = _ref$hasFooter === void 0 ? true : _ref$hasFooter,\n      _ref$hasHeader = _ref.hasHeader,\n      hasHeader = _ref$hasHeader === void 0 ? true : _ref$hasHeader,\n      header = _ref.header,\n      _ref$intent = _ref.intent,\n      intent = _ref$intent === void 0 ? 'none' : _ref$intent,\n      _ref$isConfirmDisable = _ref.isConfirmDisabled,\n      isConfirmDisabled = _ref$isConfirmDisable === void 0 ? false : _ref$isConfirmDisable,\n      _ref$isConfirmLoading = _ref.isConfirmLoading,\n      isConfirmLoading = _ref$isConfirmLoading === void 0 ? false : _ref$isConfirmLoading,\n      _ref$isShown = _ref.isShown,\n      isShown = _ref$isShown === void 0 ? false : _ref$isShown,\n      _ref$minHeightContent = _ref.minHeightContent,\n      minHeightContent = _ref$minHeightContent === void 0 ? 80 : _ref$minHeightContent,\n      _ref$onCancel = _ref.onCancel,\n      onCancel = _ref$onCancel === void 0 ? closeHandler : _ref$onCancel,\n      onCloseComplete = _ref.onCloseComplete,\n      _ref$onConfirm = _ref.onConfirm,\n      onConfirm = _ref$onConfirm === void 0 ? closeHandler : _ref$onConfirm,\n      onOpenComplete = _ref.onOpenComplete,\n      _ref$overlayProps = _ref.overlayProps,\n      overlayProps = _ref$overlayProps === void 0 ? emptyProps : _ref$overlayProps,\n      _ref$preventBodyScrol = _ref.preventBodyScrolling,\n      preventBodyScrolling = _ref$preventBodyScrol === void 0 ? false : _ref$preventBodyScrol,\n      _ref$shouldCloseOnEsc = _ref.shouldCloseOnEscapePress,\n      shouldCloseOnEscapePress = _ref$shouldCloseOnEsc === void 0 ? true : _ref$shouldCloseOnEsc,\n      _ref$shouldCloseOnOve = _ref.shouldCloseOnOverlayClick,\n      shouldCloseOnOverlayClick = _ref$shouldCloseOnOve === void 0 ? true : _ref$shouldCloseOnOve,\n      _ref$sideOffset = _ref.sideOffset,\n      sideOffset = _ref$sideOffset === void 0 ? '16px' : _ref$sideOffset,\n      title = _ref.title,\n      _ref$topOffset = _ref.topOffset,\n      topOffset = _ref$topOffset === void 0 ? '12vmin' : _ref$topOffset,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 560 : _ref$width;\n  var sideOffsetWithUnit = Number.isInteger(sideOffset) ? \"\".concat(sideOffset, \"px\") : sideOffset;\n  var maxWidth = \"calc(100% - \".concat(sideOffsetWithUnit, \" * 2)\");\n  var topOffsetWithUnit = Number.isInteger(topOffset) ? \"\".concat(topOffset, \"px\") : topOffset;\n  var maxHeight = \"calc(100% - \".concat(topOffsetWithUnit, \" * 2)\");\n\n  var renderChildren = function renderChildren(close) {\n    if (typeof children === 'function') {\n      return children({\n        close: close\n      });\n    }\n\n    if (typeof children === 'string') {\n      return /*#__PURE__*/React.createElement(Paragraph, null, children);\n    }\n\n    return children;\n  };\n\n  var renderNode = function renderNode(node, close) {\n    if (typeof node === 'function') {\n      return node({\n        close: close\n      });\n    }\n\n    return node;\n  };\n\n  var themedHeaderProps = useStyleConfig('DialogHeader', emptyProps, emptyProps, emptyProps);\n  var themedBodyProps = useStyleConfig('DialogBody', emptyProps, emptyProps, emptyProps);\n  var themedFooterProps = useStyleConfig('DialogFooter', emptyProps, emptyProps, emptyProps);\n\n  var renderHeader = function renderHeader(close) {\n    if (!header && !hasHeader) {\n      return undefined;\n    }\n\n    return /*#__PURE__*/React.createElement(Pane, _extends({\n      flexShrink: 0,\n      display: \"flex\",\n      alignItems: \"center\"\n    }, themedHeaderProps), header ? renderNode(header, close) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Heading, {\n      is: \"h4\",\n      size: 600,\n      flex: \"1\"\n    }, title), hasClose && /*#__PURE__*/React.createElement(IconButton, {\n      appearance: \"minimal\",\n      icon: CrossIcon,\n      onClick: function onClick() {\n        return onCancel(close);\n      }\n    })));\n  };\n\n  var renderFooter = function renderFooter(close) {\n    if (!footer && !hasFooter) {\n      return undefined;\n    }\n\n    return /*#__PURE__*/React.createElement(Pane, _extends({\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n    }, themedFooterProps), /*#__PURE__*/React.createElement(Pane, null, footer ? renderNode(footer, close) : /*#__PURE__*/React.createElement(React.Fragment, null, hasCancel && /*#__PURE__*/React.createElement(Button, {\n      tabIndex: 0,\n      onClick: function onClick() {\n        return onCancel(close);\n      }\n    }, cancelLabel), /*#__PURE__*/React.createElement(Button, {\n      tabIndex: 0,\n      marginLeft: 8,\n      appearance: \"primary\",\n      intent: intent,\n      isLoading: isConfirmLoading,\n      disabled: isConfirmDisabled,\n      onClick: function onClick() {\n        return onConfirm(close);\n      }\n    }, confirmLabel))));\n  };\n\n  var containerClassName = containerProps.className,\n      remainingContainerProps = _objectWithoutProperties(containerProps, _excluded);\n\n  return /*#__PURE__*/React.createElement(Overlay, {\n    isShown: isShown,\n    shouldCloseOnClick: shouldCloseOnOverlayClick,\n    shouldCloseOnEscapePress: shouldCloseOnEscapePress,\n    onExited: onCloseComplete,\n    onEntered: onOpenComplete,\n    containerProps: _objectSpread({\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'center'\n    }, overlayProps),\n    preventBodyScrolling: preventBodyScrolling\n  }, function (_ref2) {\n    var close = _ref2.close,\n        state = _ref2.state;\n    return /*#__PURE__*/React.createElement(Pane, _extends({\n      role: \"dialog\",\n      backgroundColor: \"white\",\n      elevation: 4,\n      borderRadius: 8,\n      width: width,\n      maxWidth: maxWidth,\n      maxHeight: maxHeight,\n      marginX: sideOffsetWithUnit,\n      marginY: topOffsetWithUnit,\n      display: \"flex\",\n      flexDirection: \"column\",\n      className: cx(css(animationStyles).toString(), containerClassName),\n      \"data-state\": state\n    }, remainingContainerProps), renderHeader(close), /*#__PURE__*/React.createElement(Pane, _extends({\n      \"data-state\": state,\n      display: \"flex\",\n      overflow: \"auto\",\n      flexDirection: \"column\",\n      minHeight: minHeightContent\n    }, themedBodyProps, contentContainerProps), /*#__PURE__*/React.createElement(Pane, null, renderChildren(close))), renderFooter(close));\n  });\n});\nDialog.propTypes = {\n  /**\n   * Children can be a string, node or a function accepting `({ close })`.\n   * When passing a string, <Paragraph /> is used to wrap the string.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The intent of the Dialog. Used for the button.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Title of the Dialog. Titles should use Title Case.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, the header with the title and close icon button is shown.\n   */\n  hasHeader: PropTypes.bool,\n\n  /**\n   * You can override the default header with your own custom component.\n   *\n   * This is useful if you want to provide a custom header and footer, while\n   * also enabling your Dialog's content to scroll.\n   *\n   * Header can either be a React node or a function accepting `({ close })`.\n   */\n  header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * When true, the footer with the cancel and confirm button is shown.\n   */\n  hasFooter: PropTypes.bool,\n\n  /**\n   * You can override the default footer with your own custom component.\n   *\n   * This is useful if you want to provide a custom header and footer, while\n   * also enabling your Dialog's content to scroll.\n   *\n   * Footer can either be a React node or a function accepting `({ close })`.\n   */\n  footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * When true, the cancel button is shown.\n   */\n  hasCancel: PropTypes.bool,\n\n  /**\n   * When true, the close button is shown\n   */\n  hasClose: PropTypes.bool,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the confirm button is clicked.\n   * This does not close the Dialog. A close function will be passed\n   * as a paramater you can use to close the dialog.\n   *\n   * `onConfirm={(close) => close()}`\n   */\n  onConfirm: PropTypes.func,\n\n  /**\n   * Label of the confirm button.\n   */\n  confirmLabel: PropTypes.string,\n\n  /**\n   * When true, the confirm button is set to loading.\n   */\n  isConfirmLoading: PropTypes.bool,\n\n  /**\n   * When true, the confirm button is set to disabled.\n   */\n  isConfirmDisabled: PropTypes.bool,\n\n  /**\n   * Function that will be called when the cancel button is clicked.\n   * This closes the Dialog by default.\n   *\n   * `onCancel={(close) => close()}`\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Label of the cancel button.\n   */\n  cancelLabel: PropTypes.string,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnOverlayClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Width of the Dialog.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space above the dialog.\n   * This offset is also used at the bottom when there is not enough vertical\n   * space available on screen — and the dialog scrolls internally.\n   */\n  topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space on the left/right sides of the dialog when there isn't enough\n   * horizontal space available on screen.\n   */\n  sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The min height of the body content.\n   * Makes it less weird when only showing little content.\n   */\n  minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Props that are passed to the dialog container.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Props that are passed to the content container.\n   */\n  contentContainerProps: PropTypes.object,\n\n  /**\n   * Whether or not to prevent scrolling in the outer body\n   */\n  preventBodyScrolling: PropTypes.bool,\n\n  /**\n   * Props that are passed to the Overlay component.\n   */\n  overlayProps: PropTypes.object\n};\nexport default Dialog;","map":null,"metadata":{},"sourceType":"module"}