{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"is\", \"children\", \"className\", \"appearance\", \"disabled\", \"secondaryText\", \"intent\", \"icon\", \"onSelect\"],\n    _excluded2 = [\"className\"];\nimport React, { memo, forwardRef, useMemo, useCallback } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useClickable, useStyleConfig } from '../../hooks';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\n\nvar noop = function noop() {};\n\nvar pseudoSelectors = {\n  _hover: '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):not(:focus):not(:active):hover',\n  _focus: '&[data-isselectable=\"true\"]:not([aria-current=\"true\"]):not([aria-checked=\"true\"]):focus, &[aria-selected=\"true\"]',\n  _active: '&[aria-current=\"true\"], &[data-isselectable=\"true\"]:active',\n  _current: '&[aria-current=\"true\"], &[aria-checked=\"true\"]',\n  _isSelectable: '&[data-isselectable=\"true\"]',\n  _disabled: '&:disabled, &[aria-disabled=\"true\"]'\n};\nvar internalStyles = {\n  display: 'flex',\n  alignItems: 'center'\n};\nvar MenuItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function MenuItem(props, ref) {\n  var _props$is = props.is,\n      is = _props$is === void 0 ? 'div' : _props$is,\n      children = props.children,\n      className = props.className,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      disabled = props.disabled,\n      secondaryText = props.secondaryText,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      icon = props.icon,\n      _props$onSelect = props.onSelect,\n      onSelect = _props$onSelect === void 0 ? noop : _props$onSelect,\n      passthroughProps = _objectWithoutProperties(props, _excluded);\n\n  var handleClick = useCallback(function (event) {\n    if (disabled) return;\n    onSelect(event);\n  }, [disabled, onSelect]); // Pass all props, so the hook can handled `disabled`, `onKeyDown`, `tabIndex`\n  // and any other explicit props that are passed through to the underlying component\n\n  var _useClickable = useClickable(props),\n      onKeyDown = _useClickable.onKeyDown,\n      tabIndex = _useClickable.tabIndex;\n\n  var _useStyleConfig = useStyleConfig('MenuItem', {\n    appearance: appearance\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var iconColor = intent === 'none' ? 'default' : intent;\n\n  if (disabled) {\n    iconColor = 'disabled';\n  }\n\n  var textColor = disabled ? 'disabled' : intent;\n  var secondaryTextColor = disabled ? textColor : 'muted';\n  var disabledProps = useMemo(function () {\n    return disabled ? {\n      backgroundColor: 'tint1',\n      cursor: 'not-allowed',\n      disabled: true,\n      onClick: null,\n      onKeyPress: null,\n      tabIndex: -1,\n      'aria-disabled': 'true',\n      'data-isselectable': 'false'\n    } : {};\n  }, [disabled]);\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    is: is,\n    role: \"menuitem\",\n    className: cx(themedClassName, className),\n    onClick: handleClick,\n    \"data-isselectable\": !disabled || undefined,\n    \"aria-disabled\": disabled,\n    ref: ref,\n    height: icon ? 40 : 32\n  }, boxProps, passthroughProps, disabledProps, {\n    tabIndex: tabIndex,\n    onKeyDown: onKeyDown\n  }), /*#__PURE__*/React.createElement(IconWrapper, {\n    icon: icon,\n    color: disabled ? 'disabled' : iconColor,\n    marginLeft: 16,\n    marginRight: -4,\n    size: 16,\n    flexShrink: 0\n  }), /*#__PURE__*/React.createElement(Text, {\n    color: textColor,\n    marginLeft: 16,\n    marginRight: 16,\n    flex: 1\n  }, children), secondaryText && /*#__PURE__*/React.createElement(Text, {\n    marginRight: 16,\n    color: secondaryTextColor\n  }, secondaryText));\n}));\nMenuItem.propTypes = {\n  /**\n   * Element type to use for the menu item.\n   * For example: `<MenuItem is={ReactRouterLink}>...</MenuItem>`\n   */\n  is: Box.propTypes.is,\n\n  /**\n   * Class name passed to the component.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * The Evergreen or custom icon before the label.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Secondary text shown on the right.\n   */\n  secondaryText: PropTypes.node,\n\n  /**\n   * The default theme only supports one default appearance.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The intent of the menu item.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * Flag to indicate whether the menu item is disabled or not\n   */\n  disabled: PropTypes.bool\n};\nexport default MenuItem;","map":null,"metadata":{},"sourceType":"module"}