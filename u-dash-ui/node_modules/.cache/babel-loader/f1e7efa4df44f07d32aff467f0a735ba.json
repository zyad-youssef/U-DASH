{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { memo, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport MenuDivider from './MenuDivider';\nimport MenuGroup from './MenuGroup';\nimport MenuItem from './MenuItem';\nimport MenuOption from './MenuOption';\nimport MenuOptionsGroup from './MenuOptionsGroup';\nvar Menu = /*#__PURE__*/memo(function Menu(props) {\n  var menuRef = useRef(null);\n  var firstItem = useRef();\n  var lastItem = useRef();\n  var menuItems = useRef();\n  useEffect(function () {\n    var currentMenuRef = menuRef.current;\n    menuItems.current = _toConsumableArray(currentMenuRef.querySelectorAll('[role=\"menuitemradio\"]:not([disabled]), [role=\"menuitem\"]:not([disabled])'));\n    firstItem.current = menuItems.current[0];\n    lastItem.current = menuItems.current[menuItems.current.length - 1]; // Go to next/previous item if it exists\n    // or loop around\n\n    var focusNext = function focusNext(currentItem, startItem) {\n      // Determine which item is the startItem (first or last)\n      var goingDown = startItem === firstItem.current; // Helper function for getting next legitimate element\n\n      var move = function move(elem) {\n        var indexOfItem = menuItems.current.indexOf(elem);\n\n        if (goingDown) {\n          if (indexOfItem < menuItems.current.length - 1) {\n            return menuItems.current[indexOfItem + 1];\n          }\n\n          return startItem;\n        }\n\n        if (indexOfItem - 1 > -1) {\n          return menuItems.current[indexOfItem - 1];\n        }\n\n        return startItem;\n      }; // Make first move\n\n\n      var nextItem = move(currentItem); // Focus the first one that's not disabled\n\n      nextItem.focus();\n    };\n\n    function onKeyPressListener(e) {\n      var target = e.target;\n      var menuItem = menuItems.current && menuItems.current.find(function (item) {\n        return item === target;\n      });\n      if (!menuItem) return;\n\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        focusNext(menuItem, firstItem.current);\n      }\n\n      if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        focusNext(menuItem, lastItem.current);\n      }\n\n      if (e.key === 'Home') {\n        e.preventDefault();\n        firstItem.current.focus();\n      }\n\n      if (e.key === 'End') {\n        e.preventDefault();\n        lastItem.current.focus();\n      }\n    }\n\n    currentMenuRef.addEventListener('keydown', onKeyPressListener);\n    return function () {\n      currentMenuRef.removeEventListener('keydown', onKeyPressListener);\n    };\n  }, [menuRef]);\n  var children = props.children;\n\n  var renderEmptyChildren = function renderEmptyChildren() {\n    return /*#__PURE__*/React.createElement(MenuGroup, null, /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true\n    }, \"No items...\"));\n  };\n\n  return /*#__PURE__*/React.createElement(Pane, {\n    is: \"nav\",\n    ref: menuRef,\n    role: \"menu\",\n    outline: \"none\"\n  }, children || renderEmptyChildren());\n});\nMenu.Item = MenuItem;\nMenu.Divider = MenuDivider;\nMenu.Group = MenuGroup;\nMenu.Divider = MenuDivider;\nMenu.Group = MenuGroup;\nMenu.Option = MenuOption;\nMenu.OptionsGroup = MenuOptionsGroup;\nMenu.propTypes = {\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node\n};\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}