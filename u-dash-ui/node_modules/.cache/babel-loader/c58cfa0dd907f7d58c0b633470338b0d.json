{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { memo, useMemo, useRef, useState, useEffect, useCallback } from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport Box from 'ui-box';\nimport Alert from '../../alert/src/Alert';\nvar animationEasing = {\n  deceleration: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n  acceleration: 'cubic-bezier(0.4, 0.0, 1, 1)',\n  spring: 'cubic-bezier(0.175, 0.885, 0.320, 1.175)'\n};\nvar ANIMATION_DURATION = 240;\nvar openAnimation = css.keyframes('openAnimation', {\n  from: {\n    opacity: 0,\n    transform: 'translateY(-120%)'\n  },\n  to: {\n    transform: 'translateY(0)'\n  }\n});\nvar closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.9)',\n    opacity: 0\n  }\n});\nvar animationStyles = css({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  height: 0,\n  transition: \"all \".concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration),\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: \"\".concat(openAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.spring, \" both\")\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: \"\".concat(closeAnimation, \" 120ms \").concat(animationEasing.acceleration, \" both\")\n  }\n});\nvar Toast = /*#__PURE__*/memo(function Toast(props) {\n  var children = props.children,\n      duration = props.duration,\n      hasCloseButton = props.hasCloseButton,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      isShownProp = props.isShown,\n      onRemove = props.onRemove,\n      title = props.title,\n      zIndex = props.zIndex;\n  var transitionRef = useRef(null);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isShown = _useState2[0],\n      setIsShown = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      height = _useState4[0],\n      setHeight = _useState4[1];\n\n  var closeTimer = useRef(null);\n  var clearCloseTimer = useCallback(function () {\n    if (closeTimer.current) {\n      clearTimeout(closeTimer.current);\n      closeTimer.current = null;\n    }\n  }, []);\n  var close = useCallback(function () {\n    clearCloseTimer();\n    setIsShown(false);\n  }, [clearCloseTimer]);\n  var startCloseTimer = useCallback(function () {\n    if (duration) {\n      clearCloseTimer();\n      closeTimer.current = setTimeout(function () {\n        close();\n      }, duration * 1000);\n    }\n  }, [duration, clearCloseTimer, close]);\n  useEffect(function () {\n    startCloseTimer();\n    return function () {\n      clearCloseTimer();\n    };\n  }, [startCloseTimer, clearCloseTimer]);\n  useEffect(function () {\n    if (isShownProp !== isShown && typeof isShownProp === 'boolean') {\n      setIsShown(isShownProp);\n    }\n  }, [isShown, isShownProp]);\n  var handleMouseEnter = useCallback(function () {\n    return clearCloseTimer();\n  }, [clearCloseTimer]);\n  var handleMouseLeave = useCallback(function () {\n    return startCloseTimer();\n  }, [startCloseTimer]);\n  var onRef = useCallback(function (ref) {\n    if (ref === null) return;\n\n    var _ref$getBoundingClien = ref.getBoundingClientRect(),\n        rectHeight = _ref$getBoundingClien.height;\n\n    setHeight(rectHeight);\n  }, []);\n  var styles = useMemo(function () {\n    return {\n      height: height,\n      zIndex: zIndex,\n      marginBottom: isShown ? 0 : -height\n    };\n  }, [isShown, height, zIndex]);\n  return /*#__PURE__*/React.createElement(Transition, {\n    nodeRef: transitionRef,\n    appear: true,\n    unmountOnExit: true,\n    timeout: ANIMATION_DURATION,\n    \"in\": isShown,\n    onExited: onRemove\n  }, function (state) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: transitionRef,\n      \"data-state\": state,\n      className: animationStyles,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      style: styles\n    }, /*#__PURE__*/React.createElement(Box, {\n      ref: onRef,\n      padding: 8\n    }, /*#__PURE__*/React.createElement(Alert, {\n      flexShrink: 0,\n      appearance: \"card\",\n      elevation: 3,\n      intent: intent,\n      title: title,\n      isRemoveable: hasCloseButton,\n      onRemove: close,\n      pointerEvents: \"all\"\n    }, children)));\n  });\n});\nToast.propTypes = {\n  /**\n   * The z-index of the toast.\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * Duration of the toast.\n   */\n  duration: PropTypes.number,\n\n  /**\n   * Function called when the toast is all the way closed.\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * The type of the alert.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The title of the alert.\n   */\n  title: PropTypes.node,\n\n  /**\n   * Description of the alert.\n   */\n  children: PropTypes.node,\n\n  /**\n   * When true, show a close icon button inside of the toast.\n   */\n  hasCloseButton: PropTypes.bool,\n\n  /**\n   * When false, will close the Toast and call onRemove when finished.\n   */\n  isShown: PropTypes.bool\n};\nexport default Toast;","map":null,"metadata":{},"sourceType":"module"}