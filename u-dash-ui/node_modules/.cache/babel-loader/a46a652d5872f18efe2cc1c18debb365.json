{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"children\", \"className\", \"color\", \"disabled\", \"iconAfter\", \"iconBefore\", \"intent\", \"is\", \"isActive\", \"isLoading\"],\n    _excluded2 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box, { spacing, dimensions, position, layout } from 'ui-box';\nimport { useStyleConfig } from '../../hooks';\nimport { IconWrapper } from '../../icons/src/IconWrapper';\nimport { getTextPropsForControlHeight } from '../../lib/deprecated-theme-helpers';\nimport { Spinner } from '../../spinner';\n/* eslint-disable react/prop-types */\n\nvar ButtonIcon = /*#__PURE__*/memo(function ButtonIcon(_ref) {\n  var edge = _ref.edge,\n      icon = _ref.icon,\n      size = _ref.size,\n      spacing = _ref.spacing;\n  if (!icon) return null;\n  var relativeSpace = typeof spacing === 'number' ? spacing : size;\n  var edgeMargin = -Math.round(relativeSpace * 0.25);\n  var innerMargin = Math.round(size * 0.7);\n  var marginLeft = edge === 'start' ? edgeMargin : innerMargin;\n  var marginRight = edge === 'end' ? edgeMargin : innerMargin;\n  return /*#__PURE__*/React.createElement(IconWrapper, {\n    icon: icon,\n    size: size,\n    marginLeft: marginLeft,\n    marginRight: marginRight\n  });\n});\n/* eslint-enable react/prop-types */\n\nexport var internalStyles = {\n  position: 'relative',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap',\n  justifyContent: 'center',\n  textDecoration: 'none',\n  verticalAlign: 'middle',\n  border: 'none',\n  outline: 'none',\n  userSelect: 'none',\n  cursor: 'pointer',\n  whiteSpace: 'nowrap',\n  WebkitFontSmoothing: 'antialiased',\n  WebkitAppearance: 'none',\n  MozAppearance: 'none',\n  '&::-moz-focus-inner ': {\n    border: 0\n  }\n};\nexport var pseudoSelectors = {\n  _active: '&:not([disabled]):active, &:not([disabled])[aria-expanded=\"true\"], &:not([disabled])[data-active]',\n  _disabled: '&[disabled]',\n  _focus: '&:not([disabled]):focus',\n  _focusAndActive: '&:not([disabled]):focus:active, &:not([disabled])[aria-expanded=\"true\"]:focus, &:not([disabled])[data-active]:focus',\n  _hover: '&:not([disabled]):hover'\n};\nexport var getIconSizeForButton = function getIconSizeForButton(height) {\n  if (height <= 28) return 12;\n  if (height <= 32) return 14;\n  if (height <= 40) return 16;\n  if (height <= 48) return 18;\n  return 20;\n};\nvar Button = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Button(props, ref) {\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      disabled = props.disabled,\n      iconAfter = props.iconAfter,\n      iconBefore = props.iconBefore,\n      _props$intent = props.intent,\n      intent = _props$intent === void 0 ? 'none' : _props$intent,\n      _props$is = props.is,\n      is = _props$is === void 0 ? 'button' : _props$is,\n      _props$isActive = props.isActive,\n      isActive = _props$isActive === void 0 ? false : _props$isActive,\n      isLoading = props.isLoading,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var _useStyleConfig = useStyleConfig('Button', {\n    appearance: appearance,\n    color: color,\n    intent: intent,\n    size: restProps.size || 'medium'\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  var height = restProps.height || boxProps.height; // Keep backwards compat font sizing if an explicit height was passed in.\n\n  var textProps = !restProps.size && restProps.height ? getTextPropsForControlHeight(restProps.height) : {};\n  var iconSize = getIconSizeForButton(height);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    is: is,\n    ref: ref,\n    className: cx(themedClassName, className),\n    \"data-active\": isActive || undefined\n  }, boxProps, restProps, textProps, {\n    disabled: disabled || isLoading\n  }), isLoading && /*#__PURE__*/React.createElement(Spinner, {\n    marginLeft: -Math.round(height / 8),\n    marginRight: Math.round(height / 4),\n    size: Math.round(height / 2)\n  }), /*#__PURE__*/React.createElement(ButtonIcon, {\n    icon: iconBefore,\n    size: iconSize,\n    spacing: restProps.paddingLeft,\n    edge: \"start\"\n  }), children, /*#__PURE__*/React.createElement(ButtonIcon, {\n    icon: iconAfter,\n    size: iconSize,\n    spacing: restProps.paddingRight,\n    edge: \"end\"\n  }));\n}));\nButton.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, dimensions.propTypes), spacing.propTypes), position.propTypes), layout.propTypes), {}, {\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.string,\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The size of the button\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * When true, show a loading spinner before the children.\n   * This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjunction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Sets an icon before the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconBefore: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Sets an icon after the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconAfter: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}