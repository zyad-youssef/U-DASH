{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"isSelected\", \"onPageChange\", \"page\"],\n    _excluded2 = [\"onNextPage\", \"onPageChange\", \"onPreviousPage\", \"page\", \"totalPages\"];\nimport React, { useState, useCallback, useMemo, memo, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, IconButton } from '../../buttons';\nimport { ChevronLeftIcon, ChevronRightIcon } from '../../icons';\nimport { Pane } from '../../layers';\nimport { majorScale, minorScale } from '../../scales';\nimport { useTheme } from '../../theme';\nimport { Text } from '../../typography';\nexport var usePaginationBehavior = function usePaginationBehavior() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$page = _ref.page,\n      inputPage = _ref$page === void 0 ? 1 : _ref$page;\n\n  var _useState = useState(inputPage),\n      _useState2 = _slicedToArray(_useState, 2),\n      page = _useState2[0],\n      setPage = _useState2[1];\n\n  var onNextPage = useCallback(function () {\n    setPage(function (page) {\n      return page + 1;\n    });\n  }, []);\n  var onPreviousPage = useCallback(function () {\n    setPage(function (page) {\n      return page - 1;\n    });\n  }, []);\n  var onPageChange = useCallback(function (index) {\n    setPage(index);\n  }, []);\n  return {\n    page: page,\n    onNextPage: onNextPage,\n    onPageChange: onPageChange,\n    onPreviousPage: onPreviousPage\n  };\n};\nvar MAX_HANDLES_TO_SHOW = 7;\n/* eslint-disable react/prop-types */\n\nvar PaginationButton = function PaginationButton(_ref2) {\n  var isSelected = _ref2.isSelected,\n      onPageChange = _ref2.onPageChange,\n      page = _ref2.page,\n      rest = _objectWithoutProperties(_ref2, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var isEllipsis = typeof page === 'string' && page === '...';\n  var selectedProps = useMemo(function () {\n    if (isSelected) {\n      return {\n        backgroundColor: colors.blue50,\n        color: colors.blue400\n      };\n    } else {\n      return {};\n    }\n  }, [isSelected, colors]);\n  var onClick = useCallback(function () {\n    onPageChange(page);\n  }, [page, onPageChange]);\n\n  if (isEllipsis) {\n    return /*#__PURE__*/React.createElement(Text, {\n      paddingX: majorScale(1),\n      paddingY: majorScale(1),\n      minWidth: majorScale(4),\n      textAlign: \"center\",\n      \"aria-label\": \"Pagination overflow\"\n    }, page);\n  }\n\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    \"aria-current\": isSelected,\n    \"aria-label\": \"Page \".concat(page),\n    onClick: onClick,\n    minWidth: majorScale(4),\n    paddingX: majorScale(1)\n  }, rest, selectedProps));\n};\n\nPaginationButton.displayName = \"PaginationButton\";\n/* eslint-enable react/prop-types */\n\nvar range = function range(start, stop) {\n  var output = [];\n\n  for (var i = start; i <= stop; i++) {\n    output.push(i);\n  }\n\n  return output;\n};\n\nvar getPaginationButtonContent = function getPaginationButtonContent(_ref3) {\n  var page = _ref3.page,\n      totalPages = _ref3.totalPages;\n\n  if (totalPages <= MAX_HANDLES_TO_SHOW) {\n    return range(1, totalPages);\n  }\n\n  if (totalPages > MAX_HANDLES_TO_SHOW && page <= 4) {\n    return [].concat(_toConsumableArray(range(1, 5)), ['...', totalPages]);\n  }\n\n  if (totalPages - page < 4) {\n    return [1, '...'].concat(_toConsumableArray(range(totalPages - 4, totalPages)));\n  }\n\n  return [1, '...'].concat(_toConsumableArray(range(page - 1, page + 1)), ['...', totalPages]);\n};\n\nvar noop = function noop() {};\n\nvar Pagination = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function Pagination(_ref4, ref) {\n  var _ref4$onNextPage = _ref4.onNextPage,\n      onNextPage = _ref4$onNextPage === void 0 ? noop : _ref4$onNextPage,\n      _ref4$onPageChange = _ref4.onPageChange,\n      onPageChange = _ref4$onPageChange === void 0 ? noop : _ref4$onPageChange,\n      _ref4$onPreviousPage = _ref4.onPreviousPage,\n      onPreviousPage = _ref4$onPreviousPage === void 0 ? noop : _ref4$onPreviousPage,\n      _ref4$page = _ref4.page,\n      page = _ref4$page === void 0 ? 1 : _ref4$page,\n      totalPages = _ref4.totalPages,\n      rest = _objectWithoutProperties(_ref4, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    is: \"nav\",\n    role: \"navigation\",\n    \"aria-label\": \"Pagination\"\n  }, rest, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(Pane, {\n    is: \"ul\",\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: 0\n  }, /*#__PURE__*/React.createElement(Pane, {\n    is: \"li\",\n    listStyle: \"none\"\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    appearance: \"minimal\",\n    icon: ChevronLeftIcon,\n    disabled: page === 1,\n    onClick: onPreviousPage\n  })), totalPages ? getPaginationButtonContent({\n    totalPages: totalPages,\n    page: page\n  }).map(function (val, i) {\n    var isSelected = val === page;\n    return /*#__PURE__*/React.createElement(Pane, {\n      is: \"li\",\n      listStyle: \"none\",\n      key: \"\".concat(val, \"-\").concat(i)\n    }, /*#__PURE__*/React.createElement(PaginationButton, {\n      appearance: \"minimal\",\n      isSelected: isSelected,\n      page: val,\n      onPageChange: onPageChange,\n      marginX: minorScale(1) / 2\n    }, val));\n  }) : null, /*#__PURE__*/React.createElement(Pane, {\n    is: \"li\",\n    listStyle: \"none\"\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    appearance: \"minimal\",\n    icon: ChevronRightIcon,\n    disabled: totalPages ? page === totalPages : undefined,\n    onClick: onNextPage\n  }))));\n}));\nPagination.propTypes = {\n  /**\n   * The current page that a user is on - defaults to 1.\n   */\n  page: PropTypes.number.isRequired,\n\n  /**\n   * The total number of pages to render. If ommitted, the page numbers will not be shown to the end user.\n   */\n  totalPages: PropTypes.number,\n\n  /**\n   * Callback handler when the next page button is clicked.\n   */\n  onNextPage: PropTypes.func,\n\n  /**\n   * Callback handler when the previous page button is clicked.\n   */\n  onPreviousPage: PropTypes.func,\n\n  /**\n   * Callback handler when a specific page # is clicked\n   */\n  onPageChange: PropTypes.func\n};\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}