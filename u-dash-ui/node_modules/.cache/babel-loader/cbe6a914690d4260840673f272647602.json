{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar prefixer_1 = __importDefault(require(\"./prefixer\"));\n\nvar value_to_string_1 = __importDefault(require(\"./value-to-string\"));\n\nvar get_class_name_1 = __importDefault(require(\"./get-class-name\"));\n\nfunction getCss(propertyInfo, value) {\n  var rules;\n  var valueType = typeof value;\n\n  if (valueType !== 'string' && valueType !== 'number') {\n    if (process.env.NODE_ENV !== 'production') {\n      var name = propertyInfo.jsName;\n      var encodedValue = JSON.stringify(value);\n      console.error(\"\\uD83D\\uDCE6 ui-box: property \\u201C\".concat(name, \"\\u201D was passed invalid value \\u201C\").concat(encodedValue, \"\\u201D. Only numbers and strings are supported.\"));\n    }\n\n    return null;\n  }\n\n  var valueString = value_to_string_1.default(value, propertyInfo.defaultUnit);\n  var className = get_class_name_1.default(propertyInfo, valueString);\n\n  if (propertyInfo.isPrefixed) {\n    rules = prefixer_1.default(propertyInfo.jsName || '', valueString);\n  } else {\n    rules = [{\n      property: propertyInfo.cssName || '',\n      value: valueString\n    }];\n  }\n\n  var styles;\n\n  if (process.env.NODE_ENV === 'production') {\n    var rulesString = rules.map(function (rule) {\n      return \"\".concat(rule.property, \":\").concat(rule.value);\n    }).join(';');\n    styles = \".\".concat(className, \"{\").concat(rulesString, \"}\");\n  } else {\n    var _rulesString = rules.map(function (rule) {\n      return \"  \".concat(rule.property, \": \").concat(rule.value, \";\");\n    }).join('\\n');\n\n    styles = \"\\n.\".concat(className, \" {\\n\").concat(_rulesString, \"\\n}\");\n  }\n\n  return {\n    className: className,\n    styles: styles\n  };\n}\n\nexports.default = getCss;","map":null,"metadata":{},"sourceType":"script"}