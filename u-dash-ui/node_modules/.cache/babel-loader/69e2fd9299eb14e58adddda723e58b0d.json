{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Positions from '../../constants/src/Position';\nimport { Pane } from '../../layers';\nimport warning from '../../lib/warning';\nimport { Popover } from '../../popover';\nimport { minorScale } from '../../scales';\nimport { Text } from '../../typography';\nimport { Pulsar } from './Pulsar';\nexport var Nudge = function Nudge(_ref) {\n  var children = _ref.children,\n      _ref$isShown = _ref.isShown,\n      isShown = _ref$isShown === void 0 ? false : _ref$isShown,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? Positions.TOP_RIGHT : _ref$position,\n      size = _ref.size,\n      tooltipContentProp = _ref.tooltipContent,\n      onClick = _ref.onClick;\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(true, '<Nudge> is deprecated and will be renamed to Pulsar in the next major version of Evergreen.');\n  }\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isHovered = _useState2[0],\n      setIsHovered = _useState2[1];\n\n  var handleMouseEnter = useCallback(function () {\n    return setIsHovered(true);\n  }, [setIsHovered]);\n  var handleMouseLeave = useCallback(function () {\n    return setIsHovered(false);\n  }, [setIsHovered]);\n  var isTooltipContentString = typeof tooltipContentProp === 'string';\n  var innerContent = isTooltipContentString ? /*#__PURE__*/React.createElement(Text, null, tooltipContentProp) : tooltipContentProp;\n  var tooltipContent = /*#__PURE__*/React.createElement(Pane, {\n    maxWidth: 240,\n    padding: isTooltipContentString ? minorScale(2) : undefined\n  }, innerContent);\n  return /*#__PURE__*/React.createElement(Popover, {\n    content: tooltipContent,\n    position: position,\n    isShown: isShown && isHovered && !!tooltipContentProp,\n    trigger: \"hover\",\n    onOpen: handleMouseEnter,\n    maxWidth: 240\n  }, /*#__PURE__*/React.createElement(Pane, {\n    position: \"relative\",\n    onMouseLeave: handleMouseLeave\n  }, isShown && /*#__PURE__*/React.createElement(Pulsar, {\n    onClick: onClick,\n    position: position,\n    size: size\n  }), children));\n};\nNudge.displayName = \"Nudge\";\nNudge.propTypes = {\n  /**\n   * The position for the Pulsar and the Tooltip\n   */\n  position: PropTypes.oneOf([Positions.TOP_LEFT, Positions.TOP_RIGHT, Positions.BOTTOM_LEFT, Positions.BOTTOM_RIGHT]),\n\n  /**\n   * Size of the Pulsar\n   */\n  size: Pulsar.propTypes.size,\n\n  /**\n   * Whether or not the Pulsar/Tooltip is shown\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Content for the tooltip\n   */\n  tooltipContent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * Content for the Pulsar/tooltip to be anchored to\n   */\n  children: PropTypes.node,\n\n  /**\n   * Called when the Pulsar is clicked\n   */\n  onClick: PropTypes.func\n};","map":null,"metadata":{},"sourceType":"module"}