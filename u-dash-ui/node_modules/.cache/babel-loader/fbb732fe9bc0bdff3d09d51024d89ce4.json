{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar prop_types_1 = __importDefault(require(\"prop-types\"));\n\nvar get_css_1 = __importDefault(require(\"../get-css\"));\n\nvar regex_1 = require(\"../utils/regex\");\n\nexports.propTypes = {\n  margin: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  marginBottom: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  marginLeft: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  marginRight: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  marginTop: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  marginX: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  marginY: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  padding: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  paddingBottom: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  paddingLeft: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  paddingRight: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  paddingTop: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  paddingX: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),\n  paddingY: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number])\n};\nexports.propAliases = {\n  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],\n  marginX: ['marginLeft', 'marginRight'],\n  marginY: ['marginBottom', 'marginTop'],\n  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],\n  paddingX: ['paddingLeft', 'paddingRight'],\n  paddingY: ['paddingBottom', 'paddingTop']\n};\nexports.propValidators = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  exports.propValidators.margin = function (value) {\n    if (regex_1.spacesOutsideParentheses.test(value)) {\n      return \"multiple values (\\u201C\".concat(value, \"\\u201D) aren\\u055At supported with \\u201Cmargin\\u201D. Use \\u201CmarginX\\u201D, \\u201CmarginY\\u201D \\u201CmarginBottom\\u201D, \\u201CmarginLeft\\u201D, \\u201CmarginRight\\u201D and \\u201CmarginTop\\u201D instead.\");\n    }\n\n    return;\n  };\n\n  exports.propValidators.marginX = function (value) {\n    if (regex_1.spacesOutsideParentheses.test(value)) {\n      return \"multiple values (\\u201C\".concat(value, \"\\u201D) aren\\u055At supported with \\u201CmarginX\\u201D. Use \\u201CmarginLeft\\u201D and \\u201CmarginRight\\u201D instead.\");\n    }\n\n    return;\n  };\n\n  exports.propValidators.marginY = function (value) {\n    if (regex_1.spacesOutsideParentheses.test(value)) {\n      return \"multiple values (\\u201C\".concat(value, \"\\u201D) aren\\u055At supported with \\u201CmarginY\\u201D. Use \\u201CmarginBottom\\u201D and \\u201CmarginTop\\u201D instead.\");\n    }\n\n    return;\n  };\n\n  exports.propValidators.padding = function (value) {\n    if (regex_1.spacesOutsideParentheses.test(value)) {\n      return \"multiple values (\\u201C\".concat(value, \"\\u201D) aren\\u055At supported with \\u201Cpadding\\u201D. Use \\u201CpaddingX\\u201D, \\u201CpaddingY\\u201D \\u201CpaddingBottom\\u201D, \\u201CpaddingLeft\\u201D, \\u201CpaddingRight\\u201D and \\u201CpaddingTop\\u201D instead.\");\n    }\n\n    return;\n  };\n\n  exports.propValidators.paddingX = function (value) {\n    if (regex_1.spacesOutsideParentheses.test(value)) {\n      return \"multiple values (\\u201C\".concat(value, \"\\u201D) aren\\u055At supported with \\u201CpaddingX\\u201D. Use \\u201CpaddingLeft\\u201D and \\u201CpaddingRight\\u201D instead.\");\n    }\n\n    return;\n  };\n\n  exports.propValidators.paddingY = function (value) {\n    if (regex_1.spacesOutsideParentheses.test(value)) {\n      return \"multiple values (\\u201C\".concat(value, \"\\u201D) aren\\u055At supported with \\u201CpaddingY\\u201D. Use \\u201CpaddingBottom\\u201D and \\u201CpaddingTop\\u201D instead.\");\n    }\n\n    return;\n  };\n}\n\nvar _marginTop = {\n  className: 'mt',\n  cssName: 'margin-top',\n  jsName: 'marginTop'\n};\nvar _marginRight = {\n  className: 'mr',\n  cssName: 'margin-right',\n  jsName: 'marginRight'\n};\nvar _marginBottom = {\n  className: 'mb',\n  cssName: 'margin-bottom',\n  jsName: 'marginBottom'\n};\nvar _marginLeft = {\n  className: 'ml',\n  cssName: 'margin-left',\n  jsName: 'marginLeft'\n};\nvar _paddingTop = {\n  className: 'pt',\n  cssName: 'padding-top',\n  jsName: 'paddingTop'\n};\nvar _paddingRight = {\n  className: 'pr',\n  cssName: 'padding-right',\n  jsName: 'paddingRight'\n};\nvar _paddingBottom = {\n  className: 'pb',\n  cssName: 'padding-bottom',\n  jsName: 'paddingBottom'\n};\nvar _paddingLeft = {\n  className: 'pl',\n  cssName: 'padding-left',\n  jsName: 'paddingLeft'\n};\nexports.propEnhancers = {\n  marginBottom: function marginBottom(value) {\n    return get_css_1.default(_marginBottom, value);\n  },\n  marginLeft: function marginLeft(value) {\n    return get_css_1.default(_marginLeft, value);\n  },\n  marginRight: function marginRight(value) {\n    return get_css_1.default(_marginRight, value);\n  },\n  marginTop: function marginTop(value) {\n    return get_css_1.default(_marginTop, value);\n  },\n  paddingBottom: function paddingBottom(value) {\n    return get_css_1.default(_paddingBottom, value);\n  },\n  paddingLeft: function paddingLeft(value) {\n    return get_css_1.default(_paddingLeft, value);\n  },\n  paddingRight: function paddingRight(value) {\n    return get_css_1.default(_paddingRight, value);\n  },\n  paddingTop: function paddingTop(value) {\n    return get_css_1.default(_paddingTop, value);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}